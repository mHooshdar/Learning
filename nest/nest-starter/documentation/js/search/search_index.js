var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/Aa.html",[0,0.391,1,2.397]],["body/injectables/Aa.html",[0,0.68,1,4.169,2,1.692,3,0.235,4,0.205,5,0.205,6,2.052,7,4.655,8,0.265,9,0.017,10,0.607,11,0.235,12,0.195,13,0.013,14,0.015,15,0.013]],["title/classes/AaFilter.html",[12,0.134,16,2.857]],["body/classes/AaFilter.html",[3,0.196,4,0.171,5,0.171,6,2.196,8,0.221,9,0.018,10,0.507,11,0.196,12,0.163,13,0.011,14,0.014,15,0.011,16,4.448,17,1.415,18,3.892,19,1.992,20,5.494,21,0.356,22,1.018,23,4.339,24,4.982,25,4.467,26,4.906,27,5.792,28,0.507,29,4.525,30,0.924,31,0.924,32,0.54,33,0.924,34,3.892,35,0.796,36,2.709]],["title/classes/AaGateway.html",[12,0.134,37,2.601]],["body/classes/AaGateway.html",[3,0.198,4,0.173,5,0.173,6,2.209,8,0.223,9,0.018,11,0.198,12,0.165,13,0.011,14,0.014,15,0.011,17,1.428,21,0.359,22,1.024,28,0.512,30,0.932,31,0.932,32,0.545,33,0.932,35,0.803,37,4.074,38,3.928,39,5.825,40,5.825,41,4.927,42,1.732,43,5.825,44,4.566,45,4.566,46,1.821,47,4.566,48,5.825,49,3.928,50,0.888,51,3.194,52,3.508]],["title/guards/AaGuard.html",[53,2.601,54,2.857]],["body/guards/AaGuard.html",[0,0.59,3,0.187,4,0.163,5,0.163,6,2.128,8,0.275,9,0.018,10,0.483,11,0.187,12,0.155,13,0.01,14,0.013,15,0.01,19,1.482,21,0.339,22,0.987,28,0.483,30,0.88,31,0.88,32,0.514,33,0.88,35,0.758,50,0.838,54,4.31,55,3.014,56,3.707,57,5.265,58,3.31,59,2.926,60,4.309,61,2.484,62,3.616,63,2.484,64,3.089,65,2.015,66,2.58]],["title/injectables/AaInterceptor.html",[0,0.391,67,2.857]],["body/injectables/AaInterceptor.html",[0,0.595,2,1.365,3,0.189,4,0.165,5,0.165,6,2.146,8,0.277,9,0.018,10,0.489,11,0.189,12,0.157,13,0.01,14,0.013,15,0.01,19,1.502,21,0.344,22,0.995,28,0.489,30,0.891,31,0.891,32,0.521,33,0.891,35,0.768,50,0.849,59,2.941,61,1.933,64,3.108,65,2.041,67,4.347,68,3.756,69,3.389,70,3.647,71,3.299,72,3.978,73,4.366,74,3.389,75,3.756]],["title/injectables/AaMiddleware.html",[0,0.391,76,2.857]],["body/injectables/AaMiddleware.html",[0,0.603,2,1.396,3,0.194,4,0.169,5,0.169,6,2.177,8,0.218,9,0.018,10,0.5,11,0.194,12,0.161,13,0.011,14,0.014,15,0.011,19,1.535,21,0.351,22,1.009,28,0.5,30,0.911,31,0.911,32,0.533,33,0.911,35,0.785,36,3.8,71,3.52,76,4.41,77,3.84,78,5.741,79,5.741,80,5.459,81,4.464,82,3.429,83,3.429,84,5.741]],["title/injectables/AaPipe.html",[0,0.391,85,2.857]],["body/injectables/AaPipe.html",[0,0.614,2,1.434,3,0.199,4,0.174,5,0.174,6,2.216,8,0.225,9,0.018,10,0.514,11,0.199,12,0.165,13,0.011,14,0.014,15,0.011,19,1.578,21,0.361,22,1.027,28,0.514,30,0.937,31,0.937,32,0.547,33,0.937,35,0.807,50,0.892,85,4.488,86,3.946,87,4.488,88,4.488,89,5.53,90,5.821,91,4.587,92,3.069,93,4.488]],["title/classes/AaResolver.html",[12,0.134,94,2.601]],["body/classes/AaResolver.html",[3,0.235,4,0.205,5,0.205,6,2.052,8,0.265,9,0.017,11,0.235,12,0.195,13,0.013,14,0.015,15,0.013,17,1.692,94,4.525,95,4.655,96,6.469,97,4.157]],["title/controllers/AppController.html",[98,1.646,99,2.601]],["body/controllers/AppController.html",[3,0.201,4,0.175,5,0.175,6,2.229,8,0.288,9,0.018,10,0.519,11,0.201,12,0.167,13,0.011,14,0.014,15,0.011,21,0.364,22,1.033,28,0.519,35,0.814,42,1.756,46,1.837,50,0.9,98,2.602,99,4.11,100,2.165,101,3.983,102,5.841,103,4.63,104,3.866,105,3.983,106,2.984,107,3.983,108,4.63]],["title/modules/AppModule.html",[109,1.646,110,2.601]],["body/modules/AppModule.html",[1,3.915,3,0.177,4,0.155,5,0.155,6,1.547,8,0.339,9,0.018,10,0.457,11,0.177,12,0.147,13,0.01,14,0.013,15,0.01,37,2.853,94,3.786,99,4.249,100,2.531,104,4.144,105,3.509,109,2.689,110,4.841,111,2.143,112,2.143,113,2.443,114,2.443,115,2.143,116,3.637,117,2.443,118,3.509,119,3.509,120,3.241,121,2.443,122,2.443,123,4.079,124,4.079,125,4.079,126,4.079,127,3.134]],["title/injectables/AppService.html",[0,0.391,104,2.227]],["body/injectables/AppService.html",[0,0.638,2,1.526,3,0.212,4,0.185,5,0.185,6,2.304,8,0.239,9,0.018,10,0.547,11,0.212,12,0.176,13,0.012,14,0.014,15,0.012,21,0.384,22,1.068,28,0.547,35,0.858,46,1.899,50,0.949,51,3.413,52,3.749,102,5.953,104,3.637,128,4.198,129,4.88]],["title/controllers/AuthController.html",[98,1.646,130,2.601]],["body/controllers/AuthController.html",[3,0.16,4,0.14,5,0.14,8,0.282,9,0.018,10,0.413,11,0.16,12,0.133,13,0.009,14,0.012,15,0.009,21,0.29,22,0.889,28,0.567,30,1.032,31,1.032,32,0.603,33,1.032,35,0.889,42,1.917,50,0.983,63,2.748,98,1.632,100,1.724,106,2.376,130,3.536,131,0.567,132,3.171,133,2.578,134,3.686,135,4.963,136,4.432,137,3.171,138,4.348,139,5.055,140,3.686,141,2.832,142,5.055,143,3.686,144,3.171,145,3.171,146,3.171,147,3.455,148,3.171,149,2.832,150,2.832,151,3.686,152,5.055,153,3.686,154,3.686]],["title/classes/AuthCredentialsDto.html",[12,0.134,138,2.227]],["body/classes/AuthCredentialsDto.html",[3,0.181,4,0.158,5,0.158,8,0.205,9,0.018,11,0.181,12,0.198,13,0.01,14,0.013,15,0.01,17,1.308,21,0.329,28,0.617,32,0.657,42,2.087,46,2.043,131,0.604,138,3.295,155,5.29,156,3.598,157,2.195,158,4.748,159,3.442,160,4.182,161,5.503,162,5.503,163,4.227,164,5.503,165,4.182,166,4.182,167,4.182,168,5.503,169,4.182,170,4.182,171,4.182,172,2.341,173,4.182,174,5.503,175,4.182,176,4.182]],["title/modules/AuthModule.html",[109,1.646,177,2.397]],["body/modules/AuthModule.html",[3,0.137,4,0.12,5,0.12,8,0.345,9,0.018,10,0.354,11,0.137,12,0.114,13,0.007,14,0.011,15,0.007,100,2.121,109,2.35,111,1.66,112,1.66,113,1.892,114,1.892,115,1.66,116,3.178,117,3.178,120,2.716,121,1.892,122,1.892,127,2.427,130,3.712,131,0.31,147,3.829,148,2.718,177,4.544,178,2.718,179,2.718,180,2.718,181,4.591,182,4.121,183,2.427,184,3.159,185,2.427,186,4.536,187,2.036,188,2.718,189,1.892,190,3.485,191,3.159,192,3.159,193,1.892,194,2.427,195,3.173,196,3.159,197,3.159,198,1.087,199,2.21,200,2.427,201,3.159,202,3.159,203,2.21,204,3.159,205,3.159,206,2.718,207,2.718,208,3.159,209,3.159,210,3.159,211,3.159]],["title/injectables/AuthService.html",[0,0.391,147,2.227]],["body/injectables/AuthService.html",[0,0.439,2,0.881,3,0.122,4,0.107,5,0.107,8,0.301,9,0.018,10,0.316,11,0.122,12,0.102,13,0.007,14,0.01,15,0.007,21,0.222,22,0.734,28,0.616,30,1.015,31,1.015,32,0.593,33,1.015,35,0.734,41,3.207,50,0.811,63,2.433,92,1.481,131,0.577,135,4.276,136,3.207,137,2.425,138,4.121,141,3.207,147,2.5,149,2.165,150,2.165,157,1.665,159,2.782,185,2.165,189,1.688,193,3.679,194,2.165,198,1.71,203,2.92,212,2.425,213,2.904,214,3.542,215,3.041,216,2.193,217,2.425,218,6.358,219,4.174,220,2.819,221,2.819,222,1.688,223,2.201,224,4.174,225,2.425,226,2.165,227,2.69,228,2.425,229,2.425,230,2.819,231,1.395,232,2.819,233,1.481,234,2.819,235,2.819,236,4.174,237,2.819,238,2.819,239,2.819,240,2.819,241,2.819]],["title/injectables/CacheInterceptor.html",[0,0.391,242,2.857]],["body/injectables/CacheInterceptor.html",[0,0.582,2,1.319,3,0.183,4,0.16,5,0.16,8,0.271,9,0.018,10,0.473,11,0.183,12,0.152,13,0.01,14,0.013,15,0.01,19,1.451,21,0.332,22,0.973,28,0.473,30,0.861,31,0.861,32,0.503,33,0.861,35,0.742,50,1.076,59,2.902,61,1.867,64,3.057,65,1.972,66,2.526,69,3.313,70,3.566,71,3.244,72,3.925,74,3.313,75,3.628,131,0.544,198,1.451,242,4.25,243,3.628,244,4.218,245,5.533]],["title/classes/CreateTaskDto.html",[12,0.134,246,2.227]],["body/classes/CreateTaskDto.html",[3,0.133,4,0.116,5,0.116,8,0.297,9,0.018,11,0.133,12,0.16,13,0.007,14,0.011,15,0.007,17,0.957,21,0.241,28,0.68,32,0.755,42,2.301,46,1.787,131,0.622,157,1.769,172,1.714,246,2.656,247,5.442,248,2.634,249,3.652,250,5.214,251,5.214,252,2.581,253,4.244,254,3.407,255,2.686,256,3.062,257,4.564,258,3.647,259,3.062,260,1.973,261,3.062,262,2.634,263,3.062,264,3.188,265,3.062,266,3.062,267,3.062,268,3.062,269,3.788,270,3.062,271,1.609,272,3.647,273,1.714,274,3.062,275,3.062,276,3.062,277,3.062,278,4.435,279,3.062,280,3.062,281,2.634]],["title/guards/CustomAuthGuard.html",[53,2.601,282,2.601]],["body/guards/CustomAuthGuard.html",[0,0.526,3,0.157,4,0.138,5,0.138,8,0.28,9,0.018,10,0.407,11,0.157,12,0.131,13,0.009,14,0.012,15,0.009,19,1.249,21,0.286,22,0.88,28,0.561,30,1.022,31,1.022,32,0.597,33,1.022,35,0.88,50,0.973,55,2.54,57,4.97,58,2.79,59,2.731,61,2.215,62,3.976,63,2.731,64,3.203,65,1.698,131,0.563,198,1.249,282,3.5,283,3.125,284,5.725,285,3.632,286,3.632,287,5.264,288,3.632,289,2.54,290,3.125,291,3.125,292,3.632]],["title/injectables/CustomValidationPipe.html",[0,0.391,293,2.857]],["body/injectables/CustomValidationPipe.html",[0,0.503,2,1.066,3,0.148,4,0.129,5,0.129,8,0.271,9,0.018,10,0.382,11,0.148,12,0.199,13,0.008,14,0.011,15,0.008,19,1.172,21,0.268,22,0.842,28,0.537,30,0.977,31,0.977,32,0.407,33,0.977,35,0.842,46,1.066,50,1.076,62,3.567,87,3.677,88,3.677,90,5.163,92,3.153,93,3.677,131,0.544,172,1.907,198,1.903,213,2.739,215,2.739,223,1.509,231,1.687,233,1.791,260,2.197,293,3.677,294,2.932,295,4.787,296,4.787,297,3.408,298,5.534,299,3.408,300,2.932,301,2.932,302,3.408,303,2.932,304,3.408,305,4.787,306,3.408,307,2.932,308,3.408,309,3.408,310,2.932,311,3.408,312,2.932,313,3.408,314,2.197,315,3.408,316,3.408]],["title/classes/FileUploadDto.html",[12,0.134,317,2.601]],["body/classes/FileUploadDto.html",[3,0.207,4,0.18,5,0.26,8,0.233,9,0.018,11,0.207,12,0.172,13,0.011,14,0.014,15,0.011,17,1.489,21,0.375,28,0.534,32,0.714,42,1.807,46,1.87,131,0.588,157,2.386,262,4.097,269,3.582,271,2.503,317,4.184,318,5.146,319,4.097,320,5.983,321,5.983,322,4.763]],["title/classes/ForbiddenException.html",[12,0.134,323,2.601]],["body/classes/ForbiddenException.html",[3,0.215,4,0.188,5,0.188,8,0.242,9,0.018,10,0.555,11,0.215,12,0.178,13,0.012,14,0.015,15,0.012,17,1.548,28,0.555,131,0.602,216,3.498,323,4.287,324,5.273,325,4.261,326,3.431,327,5.114,328,4.953,329,3.805,330,4.953,331,4.261]],["title/classes/GetTasksFilterDto.html",[12,0.134,332,2.227]],["body/classes/GetTasksFilterDto.html",[3,0.184,4,0.16,5,0.16,8,0.272,9,0.018,11,0.184,12,0.2,13,0.01,14,0.013,15,0.01,17,1.324,21,0.333,28,0.622,32,0.662,42,2.105,46,1.735,131,0.608,157,2.213,172,2.371,252,3.063,255,1.875,264,3.251,272,3.881,273,2.371,332,3.323,333,5.323,334,3.705,335,3.644,336,5.323,337,4.236,338,4.236,339,4.236,340,4.236,341,4.236,342,6.188,343,4.236,344,3.644,345,3.644]],["title/injectables/GqlAuthGuard.html",[0,0.391,346,2.857]],["body/injectables/GqlAuthGuard.html",[0,0.596,2,1.371,3,0.19,4,0.166,5,0.166,8,0.308,9,0.018,10,0.492,11,0.19,12,0.158,13,0.01,14,0.013,15,0.01,21,0.345,22,0.998,28,0.492,30,0.895,31,0.895,32,0.523,33,0.895,35,0.771,50,0.852,59,2.946,61,1.941,97,3.369,131,0.558,187,2.826,198,1.508,326,2.454,346,4.36,347,3.772,348,5.675,349,5.675,350,4.385,351,3.772,352,4.385,353,4.385,354,3.369,355,3.772,356,4.385]],["title/controllers/HealthController.html",[98,1.646,357,2.857]],["body/controllers/HealthController.html",[3,0.188,4,0.165,5,0.165,8,0.276,9,0.018,10,0.487,11,0.188,12,0.157,13,0.01,14,0.013,15,0.01,21,0.342,22,0.992,28,0.487,35,0.764,42,1.649,50,0.845,98,1.924,100,2.033,131,0.554,133,3.04,213,2.793,216,2.284,357,4.335,358,3.739,359,5.643,360,6.632,361,4.347,362,4.347,363,5.643,364,5.643,365,5.643,366,3.739,367,4.347,368,4.347,369,4.347,370,4.347,371,4.347,372,4.347]],["title/classes/HttpExceptionFilter.html",[12,0.134,373,2.601]],["body/classes/HttpExceptionFilter.html",[3,0.141,4,0.123,5,0.123,8,0.226,9,0.018,10,0.363,11,0.141,12,0.117,13,0.008,14,0.011,15,0.008,17,1.013,19,1.589,20,4.631,21,0.255,22,0.812,23,3.782,24,3.975,26,4.136,27,5.048,28,0.363,30,0.662,31,0.662,32,0.387,33,0.662,34,4.631,35,0.57,36,1.941,131,0.454,163,2.49,198,2.283,223,1.435,252,2.665,260,2.089,287,3.549,289,2.267,327,4.136,329,2.49,354,2.49,373,3.232,374,2.788,375,4.766,376,3.242,377,2.978,378,3.242,379,3.242,380,3.242,381,3.242,382,3.975,383,3.242,384,4.62,385,5.384,386,3.242,387,5.384,388,3.242,389,3.242,390,3.242,391,2.788,392,3.242,393,3.242,394,2.49,395,3.242,396,3.242,397,3.242,398,3.242,399,3.242,400,3.242,401,3.242]],["title/interfaces/JwtPayload.html",[227,2.397,402,2.227]],["body/interfaces/JwtPayload.html",[3,0.225,4,0.196,5,0.196,9,0.017,11,0.225,13,0.012,14,0.015,15,0.012,21,0.408,32,0.619,46,2.124,131,0.51,157,2.515,159,3.956,227,4.064,402,3.105,403,3.983,404,4.461,405,4.461]],["title/injectables/JwtStrategy.html",[0,0.391,181,2.397]],["body/injectables/JwtStrategy.html",[0,0.486,2,1.013,3,0.141,4,0.123,5,0.123,8,0.332,9,0.018,10,0.363,11,0.141,12,0.117,13,0.008,14,0.011,15,0.008,21,0.255,22,0.812,28,0.518,30,0.943,31,0.943,32,0.551,33,0.943,35,0.57,41,3.549,50,0.63,63,2.046,131,0.529,159,2.586,181,2.978,187,2.089,189,1.941,190,3.549,193,3.862,194,2.49,198,1.852,199,2.267,200,2.49,203,3.232,206,2.788,207,2.788,213,1.604,215,2.665,216,2.428,217,2.788,223,1.435,225,3.975,226,2.49,227,3.782,228,2.788,229,2.788,231,1.604,233,1.703,301,3.975,326,1.814,406,2.49,407,3.242,408,4.62,409,3.242,410,3.242,411,3.242,412,3.242,413,2.788,414,2.341,415,2.267,416,3.242,417,3.242,418,3.242,419,3.242,420,3.242,421,3.242]],["title/injectables/LoggingInterceptor.html",[0,0.391,422,2.601]],["body/injectables/LoggingInterceptor.html",[0,0.564,2,1.26,3,0.175,4,0.153,5,0.153,8,0.295,9,0.018,10,0.452,11,0.175,12,0.145,13,0.01,14,0.013,15,0.01,19,1.386,21,0.317,22,0.944,28,0.452,30,0.823,31,0.823,32,0.481,33,0.823,35,0.709,50,0.783,59,2.85,61,1.784,64,2.989,65,1.884,69,3.215,70,3.46,71,3.383,72,3.856,74,3.215,131,0.528,198,1.386,422,3.755,423,3.466,424,4.03,425,5.369,426,2.818,427,4.03,428,4.03,429,5.369,430,3.466,431,4.03,432,4.03]],["title/modules/MyLibraryModule.html",[109,1.646,433,2.601]],["body/modules/MyLibraryModule.html",[3,0.19,4,0.166,5,0.166,8,0.278,9,0.018,10,0.492,11,0.19,12,0.158,13,0.01,14,0.013,15,0.01,109,2.786,111,2.304,112,2.304,113,2.626,114,2.626,115,2.304,116,3.768,117,3.768,120,3.398,121,2.626,122,2.626,433,5.025,434,3.772,435,3.772,436,3.772,437,4.846,438,3.369,439,3.369,440,4.385,441,4.385]],["title/injectables/MyLibraryService.html",[0,0.391,437,2.397]],["body/injectables/MyLibraryService.html",[0,0.678,2,1.683,3,0.233,4,0.204,5,0.204,8,0.263,9,0.017,10,0.603,11,0.233,12,0.194,13,0.013,14,0.015,15,0.013,437,4.156,438,4.134,439,4.134,442,4.63]],["title/classes/MyTest.html",[12,0.134,257,2.601]],["body/classes/MyTest.html",[3,0.202,4,0.176,5,0.176,8,0.288,9,0.018,11,0.202,12,0.212,13,0.011,14,0.014,15,0.011,17,1.454,21,0.366,28,0.522,32,0.555,42,1.764,46,1.843,51,4.525,131,0.579,157,2.351,172,2.603,249,2.603,254,3.573,257,4.122,269,3.529,271,2.444,272,4.122,443,4.528,444,4.002,445,4.528,446,4.652]],["title/classes/MyTest2.html",[12,0.134,258,2.601]],["body/classes/MyTest2.html",[3,0.202,4,0.176,5,0.176,8,0.288,9,0.018,11,0.202,12,0.212,13,0.011,14,0.014,15,0.011,17,1.454,21,0.366,28,0.522,32,0.555,42,1.764,46,1.843,131,0.579,157,2.351,172,2.603,249,2.603,254,3.573,258,4.122,269,3.529,271,2.444,272,4.122,443,4.528,447,4.002,448,6.47,449,5.894,450,4.652]],["title/controllers/MyTestController.html",[98,1.646,451,2.601]],["body/controllers/MyTestController.html",[3,0.106,4,0.093,5,0.093,8,0.297,9,0.018,10,0.274,11,0.106,12,0.088,13,0.006,14,0.009,15,0.006,21,0.192,22,0.659,25,3.577,28,0.679,35,1.066,36,2.731,42,2.298,46,0.764,50,0.994,51,2.622,52,1.878,62,2.417,66,2.245,83,1.878,98,1.082,100,1.143,131,0.614,133,1.71,163,3.503,215,2.257,223,2.264,231,1.21,233,2.396,282,1.71,323,3.19,327,1.878,329,1.878,331,2.103,373,1.71,422,1.71,445,2.88,451,2.622,452,4.373,453,4.373,454,2.103,455,5.114,456,5.114,457,5.114,458,5.114,459,5.114,460,5.114,461,3.749,462,2.445,463,3.749,464,2.445,465,2.445,466,2.445,467,2.445,468,2.445,469,2.445,470,2.445,471,2.445,472,2.445,473,2.445,474,2.445,475,2.445,476,2.445,477,2.103,478,2.103,479,1.71,480,2.445,481,2.445,482,2.445,483,1.71,484,2.445,485,2.445,486,1.71,487,2.445,488,2.445,489,2.445,490,2.445,491,2.445,492,2.445,493,2.445,494,2.445,495,2.445,496,2.445,497,2.445,498,2.445,499,2.445,500,2.445,501,2.445,502,2.445,503,2.445,504,2.445,505,2.103,506,2.445,507,2.445,508,2.445]],["title/modules/MyTestModule.html",[109,1.646,509,2.601]],["body/modules/MyTestModule.html",[3,0.191,4,0.167,5,0.167,8,0.309,9,0.018,10,0.494,11,0.191,12,0.159,13,0.01,14,0.013,15,0.01,100,2.661,109,2.792,111,2.314,112,2.314,113,2.637,114,2.637,115,2.314,116,3.776,117,2.637,120,3.408,121,2.637,122,2.637,131,0.433,451,4.41,452,3.081,453,3.081,509,4.944,510,3.789,511,3.789,512,4.556,513,4.405,514,4.405,515,4.405]],["title/injectables/MyTestService.html",[0,0.391,512,2.397]],["body/injectables/MyTestService.html",[0,0.676,2,1.674,3,0.232,4,0.203,5,0.203,8,0.262,9,0.017,10,0.6,11,0.232,12,0.193,13,0.013,14,0.015,15,0.013,131,0.526,452,3.744,453,3.744,512,4.142,516,4.605]],["title/interfaces/Response.html",[377,2.397,402,2.227]],["body/interfaces/Response.html",[0,0.588,3,0.186,4,0.163,5,0.163,8,0.305,9,0.018,10,0.481,11,0.243,12,0.155,13,0.01,14,0.013,15,0.01,19,1.476,21,0.338,25,4.355,32,0.512,50,0.834,59,2.477,61,1.899,64,2.77,65,2.006,69,2.569,71,2.254,72,3.351,74,3.351,131,0.422,157,2.232,377,3.606,402,2.569,403,3.296,426,3.001,517,3.296,518,4.411,519,3.691,520,3.001,521,3.691]],["title/guards/RolesGuard.html",[53,2.601,483,2.601]],["body/guards/RolesGuard.html",[0,0.478,3,0.137,4,0.12,5,0.12,8,0.26,9,0.018,10,0.355,11,0.137,12,0.114,13,0.008,14,0.011,15,0.008,19,1.09,21,0.249,22,0.799,28,0.596,30,1.086,31,1.086,32,0.634,33,1.086,35,0.799,46,2.001,50,1.034,55,2.217,57,4.724,58,2.435,59,2.572,61,2.013,62,3.427,63,2.013,64,2.632,65,1.482,66,2.722,92,1.665,106,2.043,131,0.571,198,1.829,216,1.665,222,1.898,287,2.435,291,2.726,414,1.264,479,3.719,483,3.18,522,2.726,523,4.546,524,3.169,525,6.401,526,3.169,527,3.169,528,4.546,529,5.317,530,3.169,531,2.726,532,3.169,533,3.169,534,3.169,535,3.169,536,3.169,537,3.169]],["title/classes/Task.html",[12,0.134,255,1.646]],["body/classes/Task.html",[3,0.126,4,0.11,5,0.11,8,0.273,9,0.018,11,0.126,12,0.105,13,0.007,14,0.01,15,0.007,17,0.91,21,0.229,28,0.697,32,0.816,42,2.357,46,1.745,131,0.631,157,1.704,222,2.559,249,2.834,252,2.507,253,3.542,255,2.242,260,2.754,264,3.375,269,3.846,271,1.529,273,1.628,281,5.668,290,2.503,314,3.597,326,2.391,414,2.682,538,2.503,539,4.356,540,3.542,541,3.89,542,3.676,543,2.91,544,2.503,545,2.91,546,2.91,547,2.91,548,2.91,549,2.91,550,2.91,551,3.676,552,2.91,553,2.91,554,2.91,555,2.91,556,5.113,557,3.676,558,4.273,559,3.676,560,1.628,561,2.035,562,2.235,563,2.91]],["title/classes/TaskRepository.html",[12,0.134,564,2.397]],["body/classes/TaskRepository.html",[3,0.101,4,0.088,5,0.088,8,0.291,9,0.018,10,0.26,11,0.101,12,0.084,13,0.005,14,0.009,15,0.005,17,0.725,21,0.183,22,0.633,23,2.32,28,0.495,30,0.735,31,0.735,32,0.43,33,0.735,35,0.633,50,0.7,63,2.202,92,1.219,131,0.489,157,1.436,198,1.852,213,2.184,214,3.205,215,2.82,222,1.389,223,2.384,231,1.782,233,1.892,246,3.412,249,2.015,252,2.462,253,2.518,255,2.523,264,1.219,273,1.298,312,3.097,326,2.015,332,2.978,334,2.978,336,4.902,375,2.765,394,1.782,414,2.779,518,1.495,541,2.765,560,1.298,561,1.622,562,1.782,564,2.32,565,1.995,566,3.389,567,2.765,568,2.765,569,3.6,570,2.319,571,2.765,572,2.319,573,2.765,574,2.319,575,3.389,576,3.796,577,1.995,578,1.782,579,1.782,580,1.782,581,1.782,582,1.782,583,2.319,584,1.995,585,2.319,586,2.319,587,1.995,588,2.319,589,2.319,590,3.6,591,3.6,592,2.765,593,2.319,594,3.6,595,2.765,596,1.995,597,1.995,598,3.6,599,1.995,600,3.097,601,1.995,602,2.319,603,2.319]],["title/classes/TaskStatusValidationPipe.html",[12,0.134,604,2.601]],["body/classes/TaskStatusValidationPipe.html",[3,0.147,4,0.129,5,0.129,8,0.234,9,0.018,10,0.381,11,0.147,12,0.122,13,0.008,14,0.011,15,0.008,17,1.062,19,1.643,21,0.267,22,0.84,28,0.619,30,0.975,31,0.975,32,0.659,33,0.975,35,0.84,50,0.928,87,3.669,88,3.669,92,3.318,93,4.243,107,4.751,131,0.589,157,1.905,213,2.734,222,2.034,223,2.114,233,2.509,252,3.241,255,1.504,264,1.785,273,1.901,300,2.922,344,4.108,345,4.108,562,3.669,604,3.34,605,5.155,606,2.922,607,5.523,608,4.776,609,3.397,610,4.776,611,3.397,612,3.397,613,3.397,614,3.397,615,3.397,616,3.397,617,3.397,618,3.397,619,3.397]],["title/controllers/TasksController.html",[98,1.646,620,2.601]],["body/controllers/TasksController.html",[3,0.066,4,0.058,5,0.164,8,0.296,9,0.018,10,0.17,11,0.066,12,0.055,13,0.004,14,0.006,15,0.004,21,0.12,22,0.449,28,0.559,30,1.018,31,1.018,32,0.69,33,1.018,35,0.876,36,1.53,42,1.89,46,0.799,50,0.841,63,2.49,98,0.672,100,0.71,106,0.979,131,0.514,133,1.062,144,3.336,145,2.198,146,1.306,187,0.979,213,0.752,214,1.647,223,1.464,246,3.685,249,2.789,252,2.467,253,1.062,255,2.206,264,2.037,271,0.798,273,0.85,289,1.062,314,3.508,317,2.313,332,2.322,334,1.98,351,1.306,394,1.167,414,2.928,477,1.306,478,1.306,518,2.131,540,3.278,561,1.062,567,2.979,568,2.54,571,1.167,573,1.167,575,2.54,578,1.167,579,1.167,580,1.167,581,1.167,582,1.167,584,1.306,595,2.54,596,1.306,597,2.845,604,1.787,620,1.787,621,1.306,622,3.307,623,2.845,624,2.845,625,2.845,626,2.555,627,1.519,628,3.878,629,3.878,630,3.307,631,1.519,632,1.519,633,1.519,634,1.519,635,2.555,636,1.519,637,2.555,638,2.555,639,1.519,640,1.306,641,2.555,642,1.519,643,1.306,644,2.555,645,1.519,646,1.519,647,1.306,648,2.555,649,1.519,650,1.519,651,1.519,652,1.519,653,1.519,654,1.519,655,3.878,656,1.519,657,1.519,658,1.519,659,1.519,660,1.519,661,1.53,662,1.306,663,3.828,664,1.519,665,1.519,666,2.555,667,3.307,668,1.519,669,2.555,670,3.307,671,1.519,672,1.519,673,1.306,674,1.519,675,1.519,676,1.519,677,1.519,678,1.519,679,1.519,680,1.519,681,1.519,682,3.307,683,1.519,684,1.519,685,3.307,686,1.519,687,1.519,688,1.519,689,1.519,690,1.519,691,2.555,692,2.555,693,1.519,694,1.519,695,1.519,696,1.519,697,1.519,698,1.519,699,1.519,700,1.519,701,1.519]],["title/modules/TasksModule.html",[109,1.646,702,2.601]],["body/modules/TasksModule.html",[3,0.172,4,0.15,5,0.15,8,0.336,9,0.018,10,0.445,11,0.172,12,0.143,13,0.009,14,0.013,15,0.009,100,2.484,109,2.651,111,2.083,112,2.083,113,2.375,114,2.375,115,2.083,116,3.586,117,2.375,120,3.181,121,2.375,122,2.375,127,4.08,131,0.39,177,4.425,188,3.411,189,2.375,564,2.556,620,4.189,661,4.111,662,3.411,702,4.984,703,3.411,704,3.965,705,3.411,706,3.965,707,3.965,708,3.411,709,3.965,710,3.965]],["title/injectables/TasksService.html",[0,0.391,661,2.227]],["body/injectables/TasksService.html",[0,0.355,2,0.667,3,0.093,4,0.081,5,0.081,8,0.292,9,0.018,10,0.239,11,0.093,12,0.077,13,0.008,14,0.008,15,0.005,21,0.168,22,0.593,28,0.617,30,1.124,31,1.124,32,0.657,33,1.124,35,0.91,50,0.924,63,2.788,131,0.566,189,1.278,198,1.439,213,1.057,215,3.234,216,1.773,223,1.494,226,1.64,231,2.071,233,1.773,246,3.1,252,2.353,255,2.104,264,2.498,273,1.195,314,3.964,332,2.846,334,1.278,414,2.966,540,4.405,541,2.592,561,1.493,564,3.547,567,2.592,568,2.592,571,2.592,573,2.592,575,1.64,578,1.64,579,1.64,580,1.64,581,1.64,582,1.64,587,2.902,599,1.837,601,1.837,623,2.902,624,2.902,625,3.599,640,2.902,643,2.902,647,1.837,661,2.02,708,1.837,711,1.837,712,2.135,713,2.135,714,2.135,715,2.135,716,2.135,717,2.135,718,2.135,719,2.135,720,2.135,721,2.135,722,5.177,723,2.135,724,3.374,725,2.135,726,2.135,727,2.135,728,2.135]],["title/injectables/TimeoutInterceptor.html",[0,0.391,486,2.601]],["body/injectables/TimeoutInterceptor.html",[0,0.555,2,1.23,3,0.171,4,0.149,5,0.149,8,0.292,9,0.018,10,0.441,11,0.171,12,0.142,13,0.009,14,0.013,15,0.009,19,1.353,21,0.31,22,0.929,28,0.441,30,0.803,31,0.803,32,0.469,33,0.803,35,0.692,50,1.16,59,2.823,61,1.742,64,2.953,65,1.84,69,3.164,70,3.405,71,3.134,72,3.818,74,3.164,131,0.519,382,3.384,426,2.752,430,3.384,486,3.695,729,3.384,730,3.934,731,5.283,732,3.934,733,5.283,734,3.934,735,3.934,736,3.934,737,3.934,738,3.384,739,3.934,740,3.934]],["title/injectables/TransformInterceptor.html",[0,0.391,520,2.601]],["body/injectables/TransformInterceptor.html",[0,0.566,2,1.265,3,0.175,4,0.153,5,0.153,8,0.296,9,0.018,10,0.454,11,0.233,12,0.146,13,0.01,14,0.013,15,0.01,19,1.392,21,0.318,22,0.947,25,2.83,28,0.454,30,0.826,31,0.826,32,0.483,33,0.826,35,0.711,50,0.787,59,2.855,61,2.383,64,2.995,65,1.892,69,3.623,70,2.608,71,3.179,72,3.862,74,3.224,131,0.529,377,2.608,402,2.423,426,2.83,517,3.108,518,3.47,519,3.481,520,3.765,521,3.481,741,4.046]],["title/classes/User.html",[12,0.134,414,1.483]],["body/classes/User.html",[3,0.126,4,0.11,5,0.11,8,0.273,9,0.018,11,0.126,12,0.105,13,0.007,14,0.01,15,0.007,17,0.91,21,0.229,22,0.751,28,0.697,30,0.594,31,0.594,32,0.786,33,0.594,35,0.512,42,2.255,46,2.102,50,0.566,63,1.892,66,1.742,131,0.631,157,1.704,158,3.903,159,2.834,198,1.001,215,2.507,231,1.44,255,2.751,260,2.754,269,3.342,271,1.529,314,2.754,326,2.391,334,3.032,414,1.704,539,4.356,540,3.542,542,2.503,544,2.503,551,3.676,556,5.346,557,3.676,559,3.676,560,1.628,600,2.503,742,2.503,743,4.356,744,4.273,745,2.91,746,2.91,747,2.91,748,2.91,749,2.91,750,2.91,751,2.91,752,4.273,753,2.91,754,4.273,755,2.91,756,3.282,757,2.91,758,2.91,759,4.273,760,2.503,761,2.91,762,2.91]],["title/classes/UserRepository.html",[12,0.134,193,2.227]],["body/classes/UserRepository.html",[3,0.114,4,0.1,5,0.1,8,0.279,9,0.018,10,0.296,11,0.114,12,0.095,13,0.006,14,0.009,15,0.006,17,0.825,21,0.208,22,0.699,23,1.701,28,0.536,30,0.976,31,0.976,32,0.57,33,0.976,35,0.841,46,1.874,50,0.929,63,2.654,131,0.523,136,3.053,138,4.06,141,3.053,149,2.027,150,2.027,158,3.343,159,3.193,193,2.38,198,1.829,213,2.366,215,3.243,223,1.759,231,2.824,233,2.088,326,2.224,375,2.027,414,2.122,415,1.846,505,2.27,560,1.477,566,3.672,576,3.419,577,2.27,592,2.027,595,3.053,743,4.576,756,3.053,760,2.27,763,2.27,764,3.974,765,3.974,766,3.974,767,2.639,768,2.639,769,3.974,770,2.639,771,2.639,772,2.639,773,2.639,774,3.974,775,2.639,776,2.639,777,2.639,778,2.639,779,2.639,780,2.639,781,2.639,782,2.639,783,2.639,784,2.639,785,2.639,786,2.639]],["title/classes/UserSubscriber.html",[12,0.134,195,2.601]],["body/classes/UserSubscriber.html",[3,0.168,4,0.147,5,0.147,8,0.256,9,0.018,11,0.168,12,0.14,13,0.009,14,0.012,15,0.009,17,1.211,19,1.798,21,0.305,22,0.919,28,0.663,30,1.067,31,1.067,32,0.624,33,1.067,35,0.919,36,2.319,50,0.753,131,0.623,195,3.656,216,2.035,414,2.36,415,2.709,560,2.167,787,3.331,788,5.918,789,5.228,790,6.336,791,4.497,792,5.692,793,3.873,794,5.228,795,6.336,796,3.873,797,3.873,798,3.873,799,5.228,800,3.873,801,3.873,802,3.873,803,3.873]],["title/injectables/UsersService.html",[0,0.391,182,2.397]],["body/injectables/UsersService.html",[0,0.521,2,1.119,3,0.155,4,0.136,5,0.136,8,0.278,9,0.018,10,0.401,11,0.155,12,0.129,13,0.008,14,0.012,15,0.008,21,0.282,22,0.871,23,2.307,28,0.555,30,1.012,31,1.012,32,0.591,33,1.012,35,0.63,106,2.307,131,0.558,182,3.193,198,1.231,215,2.812,216,1.881,231,3.379,307,3.08,414,2.445,415,2.504,560,2.004,592,2.75,738,3.08,791,3.08,792,5.728,804,3.08,805,4.954,806,3.58,807,4.954,808,3.58,809,3.58,810,4.954,811,3.58,812,3.58,813,3.58,814,3.58,815,3.58,816,3.58,817,3.58,818,3.58,819,3.58,820,3.58,821,3.58,822,3.58,823,3.58,824,3.58,825,3.58,826,3.58,827,3.58]],["title/coverage.html",[828,3.907]],["body/coverage.html",[0,0.693,1,1.807,5,0.064,6,2.326,7,1.46,9,0.018,12,0.237,13,0.004,14,0.007,15,0.004,16,1.304,18,1.46,32,0.203,37,1.187,38,1.46,53,2.504,54,1.304,56,1.46,67,1.304,68,1.46,76,1.304,77,1.46,83,2.751,85,1.304,86,1.46,94,1.187,95,1.46,98,2.037,99,1.187,101,1.46,104,1.017,115,1.473,128,1.46,130,1.187,131,0.727,132,1.46,138,1.017,147,1.017,155,1.46,156,1.46,181,1.094,182,1.094,183,1.304,193,1.017,195,1.187,199,1.961,212,1.46,214,1.094,223,0.752,227,1.094,242,1.304,243,1.46,246,1.017,247,1.46,248,1.46,252,0.84,255,0.752,257,1.187,258,1.187,282,1.187,283,1.46,293,1.304,294,1.46,310,6.484,317,1.187,318,1.46,319,1.46,323,1.187,324,1.46,325,1.46,332,1.017,333,1.46,334,1.017,335,1.46,346,1.304,347,1.46,357,1.304,358,1.46,373,1.187,374,1.46,377,1.094,402,1.679,404,1.46,405,1.46,406,2.153,414,0.677,422,1.187,423,1.46,437,1.094,438,1.304,439,1.304,442,1.46,443,2.153,444,1.46,447,1.46,451,1.187,452,1.961,453,1.961,454,1.46,479,1.187,483,1.187,486,1.187,512,1.094,516,1.46,517,2.153,520,1.187,522,1.46,538,1.46,564,1.094,565,1.46,604,1.187,605,1.46,606,1.46,620,1.187,621,1.46,661,1.017,663,1.304,711,1.46,729,1.46,742,1.46,763,1.46,787,1.46,804,1.46,828,1.304,829,1.698,830,1.698,831,1.698,832,1.46,833,5.682,834,6.519,835,6.826,836,1.46,837,1.46,838,1.46,839,5.242,840,1.698,841,1.46,842,2.412,843,1.46,844,3.581,845,4.602,846,1.46,847,1.46,848,1.46,849,2.412,850,1.46,851,1.46,852,1.46,853,2.803,854,1.698,855,1.698,856,1.698]],["title/dependencies.html",[112,2.352,857,3.101]],["body/dependencies.html",[9,0.018,10,0.452,12,0.193,13,0.01,14,0.013,15,0.01,49,3.466,65,1.884,89,3.466,97,3.096,112,2.117,172,2.255,185,3.096,187,2.597,189,2.413,190,3.096,203,2.818,271,2.117,289,3.755,303,3.466,366,3.466,413,4.618,531,3.466,560,2.255,673,3.466,756,3.096,858,6.038,859,4.03,860,4.03,861,4.03,862,5.369,863,4.03,864,4.03,865,4.03,866,4.03,867,4.03,868,4.03,869,4.03,870,4.03,871,4.03,872,4.03,873,4.03,874,4.03,875,4.03,876,4.03,877,4.03,878,4.03,879,4.03,880,4.03,881,4.03,882,4.03,883,4.03,884,4.03,885,4.03]],["title/miscellaneous/enumerations.html",[886,1.857,887,3.85]],["body/miscellaneous/enumerations.html",[9,0.017,13,0.012,14,0.015,15,0.012,21,0.415,92,3.594,131,0.518,264,3.345,886,3.154,887,4.532,888,5.268,889,6.365,890,5.268,891,5.476,892,6.365,893,6.365]],["title/miscellaneous/functions.html",[886,1.857,894,3.85]],["body/miscellaneous/functions.html",[6,1.917,9,0.016,13,0.012,14,0.015,15,0.012,21,0.398,30,1.032,31,1.032,33,1.032,71,3.261,80,5.339,82,3.882,115,3.846,131,0.61,214,4,836,4.347,848,4.347,852,4.347,886,3.026,894,4.347,895,6.207,896,5.054,897,5.054]],["title/index.html",[21,0.244,898,3.101,899,3.101]],["body/index.html",[4,0.144,9,0.018,13,0.009,14,0.012,15,0.009,249,2.126,391,3.268,445,3.964,566,2.918,828,2.918,891,3.268,900,3.799,901,3.799,902,5.16,903,3.799,904,3.799,905,3.799,906,3.799,907,3.799,908,3.799,909,3.799,910,3.799,911,3.799,912,5.86,913,3.799,914,3.799,915,3.799,916,6.935,917,3.799,918,3.799,919,3.799,920,6.779,921,3.799,922,3.799,923,5.16,924,3.799,925,3.799,926,3.799,927,5.16,928,3.799,929,3.799,930,3.799,931,5.16,932,5.16,933,3.799,934,3.799,935,3.799,936,3.799,937,3.268,938,3.799,939,3.799,940,3.799,941,3.799,942,3.799,943,3.799,944,3.799,945,3.799,946,3.799,947,3.799,948,3.799,949,3.799,950,3.799,951,3.799,952,3.799,953,3.799,954,3.799,955,3.799]],["title/modules.html",[111,2.672]],["body/modules.html",[9,0.015,13,0.012,14,0.015,15,0.012,110,4.327,111,2.642,177,3.241,433,3.517,509,3.517,702,3.517,937,6.289,956,7.311,957,7.311,958,7.311]],["title/overview.html",[959,4.375]],["body/overview.html",[2,1.096,9,0.018,13,0.008,14,0.012,15,0.008,17,1.096,55,2.451,100,1.639,104,3.364,109,1.551,110,4.979,111,1.841,112,1.841,113,2.098,114,2.098,115,1.841,116,2.098,117,2.098,118,3.014,119,3.014,120,2.923,121,2.098,122,2.098,147,3.364,177,4.637,178,3.014,179,3.014,180,3.014,181,4.374,182,3.62,403,2.692,433,4.467,434,3.014,435,3.014,436,3.014,437,4.374,509,4.467,510,3.014,511,3.014,512,3.62,661,3.364,702,4.746,703,3.014,705,3.014,959,3.014,960,3.504,961,3.504,962,3.504,963,4.881,964,3.504,965,3.504]],["title/miscellaneous/variables.html",[886,1.857,966,3.85]],["body/miscellaneous/variables.html",[1,2.772,6,1.113,9,0.018,13,0.007,14,0.01,15,0.007,21,0.231,26,2.255,32,0.513,46,1.345,50,0.836,59,1.904,61,1.299,66,1.758,82,2.255,92,3.541,131,0.633,158,2.053,159,1.643,183,2.255,198,1.751,199,3.92,200,3.304,222,4.035,255,1.299,354,3.304,355,2.525,406,2.255,414,2.379,479,3.92,518,3.281,663,3.304,832,2.525,837,2.525,838,3.7,841,2.525,842,4.821,843,3.7,846,2.525,847,2.525,849,2.525,850,3.7,851,3.7,886,1.758,966,2.525,967,2.935,968,2.935,969,4.301,970,2.935,971,2.935,972,2.935,973,2.935,974,2.935,975,4.301,976,2.935,977,4.301,978,2.935,979,2.935,980,2.935,981,2.935,982,2.935,983,2.935,984,2.935,985,2.935,986,2.935,987,2.935,988,2.935,989,2.935,990,2.935,991,2.935,992,2.935,993,2.935,994,2.935,995,2.935,996,2.935,997,2.935,998,2.935,999,2.935,1000,2.935,1001,2.935,1002,2.935,1003,2.935,1004,2.935,1005,2.935,1006,2.935,1007,2.935]]],"invertedIndex":[["",{"_index":9,"title":{},"body":{"injectables/Aa.html":{},"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"classes/AaResolver.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":310,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"coverage.html":{}}}],["0.1.13",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["0.2.28",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":845,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":854,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":853,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":690,"title":{},"body":{"controllers/TasksController.html":{}}}],["17",{"_index":963,"title":{},"body":{"overview.html":{}}}],["2",{"_index":965,"title":{},"body":{"overview.html":{}}}],["201",{"_index":635,"title":{},"body":{"controllers/TasksController.html":{}}}],["23505",{"_index":780,"title":{},"body":{"classes/UserRepository.html":{}}}],["3",{"_index":964,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["3.3.2",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["4.0.0",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["4.6.1",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":637,"title":{},"body":{"controllers/TasksController.html":{}}}],["5",{"_index":962,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":961,"title":{},"body":{"overview.html":{}}}],["6.5.4",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["7.0.1",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["7.1.4",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["7.4.4",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["7.7.0",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["7000",{"_index":504,"title":{},"body":{"controllers/MyTestController.html":{}}}],["8.4.0",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["aa",{"_index":1,"title":{"injectables/Aa.html":{}},"body":{"injectables/Aa.html":{},"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["aa.gateway",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["aa/aa.resolver",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["aafilter",{"_index":16,"title":{"classes/AaFilter.html":{}},"body":{"classes/AaFilter.html":{},"coverage.html":{}}}],["aagateway",{"_index":37,"title":{"classes/AaGateway.html":{}},"body":{"classes/AaGateway.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["aaguard",{"_index":54,"title":{"guards/AaGuard.html":{}},"body":{"guards/AaGuard.html":{},"coverage.html":{}}}],["aainterceptor",{"_index":67,"title":{"injectables/AaInterceptor.html":{}},"body":{"injectables/AaInterceptor.html":{},"coverage.html":{}}}],["aamiddleware",{"_index":76,"title":{"injectables/AaMiddleware.html":{}},"body":{"injectables/AaMiddleware.html":{},"coverage.html":{}}}],["aapipe",{"_index":85,"title":{"injectables/AaPipe.html":{}},"body":{"injectables/AaPipe.html":{},"coverage.html":{}}}],["aaresolver",{"_index":94,"title":{"classes/AaResolver.html":{}},"body":{"classes/AaResolver.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["accesstoken",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["allowedstatuses",{"_index":607,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["already",{"_index":783,"title":{},"body":{"classes/UserRepository.html":{}}}],["amazing",{"_index":938,"title":{},"body":{"index.html":{}}}],["angular",{"_index":911,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":666,"title":{},"body":{"controllers/TasksController.html":{}}}],["apibody",{"_index":667,"title":{},"body":{"controllers/TasksController.html":{}}}],["apiconsumes",{"_index":668,"title":{},"body":{"controllers/TasksController.html":{}}}],["apiconsumes('multipart/form",{"_index":697,"title":{},"body":{"controllers/TasksController.html":{}}}],["apicreatedresponse",{"_index":669,"title":{},"body":{"controllers/TasksController.html":{}}}],["apiextramodels",{"_index":268,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["apiextramodels(mytest2",{"_index":276,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["apiproperty",{"_index":269,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/FileUploadDto.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"classes/Task.html":{},"classes/User.html":{}}}],["apiproperty()@column",{"_index":554,"title":{},"body":{"classes/Task.html":{}}}],["apiproperty({enum",{"_index":265,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["apiproperty({oneof",{"_index":259,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["apiproperty({type",{"_index":262,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/FileUploadDto.html":{}}}],["apiresponse",{"_index":670,"title":{},"body":{"controllers/TasksController.html":{}}}],["apitags",{"_index":671,"title":{},"body":{"controllers/TasksController.html":{}}}],["apitags('tasks",{"_index":676,"title":{},"body":{"controllers/TasksController.html":{}}}],["app",{"_index":918,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app/src/aa.decorator.ts",{"_index":832,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["app/src/aa.filter.ts",{"_index":18,"title":{},"body":{"classes/AaFilter.html":{},"coverage.html":{}}}],["app/src/aa.filter.ts:5",{"_index":29,"title":{},"body":{"classes/AaFilter.html":{}}}],["app/src/aa.gateway.ts",{"_index":38,"title":{},"body":{"classes/AaGateway.html":{},"coverage.html":{}}}],["app/src/aa.gateway.ts:6",{"_index":44,"title":{},"body":{"classes/AaGateway.html":{}}}],["app/src/aa.guard.ts",{"_index":56,"title":{},"body":{"guards/AaGuard.html":{},"coverage.html":{}}}],["app/src/aa.guard.ts:6",{"_index":60,"title":{},"body":{"guards/AaGuard.html":{}}}],["app/src/aa.interceptor.ts",{"_index":68,"title":{},"body":{"injectables/AaInterceptor.html":{},"coverage.html":{}}}],["app/src/aa.interceptor.ts:6",{"_index":73,"title":{},"body":{"injectables/AaInterceptor.html":{}}}],["app/src/aa.middleware.ts",{"_index":77,"title":{},"body":{"injectables/AaMiddleware.html":{},"coverage.html":{}}}],["app/src/aa.middleware.ts:5",{"_index":81,"title":{},"body":{"injectables/AaMiddleware.html":{}}}],["app/src/aa.pipe.ts",{"_index":86,"title":{},"body":{"injectables/AaPipe.html":{},"coverage.html":{}}}],["app/src/aa.pipe.ts:5",{"_index":91,"title":{},"body":{"injectables/AaPipe.html":{}}}],["app/src/aa.ts",{"_index":7,"title":{},"body":{"injectables/Aa.html":{},"coverage.html":{}}}],["app/src/aa/aa.resolver.ts",{"_index":95,"title":{},"body":{"classes/AaResolver.html":{},"coverage.html":{}}}],["app/src/app.controller.ts",{"_index":101,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["app/src/app.controller.ts:9",{"_index":103,"title":{},"body":{"controllers/AppController.html":{}}}],["app/src/app.module.ts",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["app/src/app.service.ts",{"_index":128,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["app/src/app.service.ts:5",{"_index":129,"title":{},"body":{"injectables/AppService.html":{}}}],["app/src/main.ts",{"_index":836,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["appcontroller",{"_index":99,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":908,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":110,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../aa.decorator.ts",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../app.module.ts",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.module.ts",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../get",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../graphql",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../jwt.strategy.ts",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../logger.middleware.ts",{"_index":896,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../main.ts",{"_index":895,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../roles.decorator.ts",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../task",{"_index":888,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../typeorm.config.ts",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/my",{"_index":6,"title":{},"body":{"injectables/Aa.html":{},"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"classes/AaResolver.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/nest",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["appservice",{"_index":104,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argumentmetadata",{"_index":90,"title":{},"body":{"injectables/AaPipe.html":{},"injectables/CustomValidationPipe.html":{}}}],["argumentshost",{"_index":27,"title":{},"body":{"classes/AaFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":315,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["async",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CustomValidationPipe.html":{},"injectables/JwtStrategy.html":{},"controllers/MyTestController.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":707,"title":{},"body":{"modules/TasksModule.html":{}}}],["auth/user.entity",{"_index":561,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["authcontroller",{"_index":130,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcredentialsdto",{"_index":138,"title":{"classes/AuthCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["authguard",{"_index":351,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"controllers/TasksController.html":{}}}],["authguard('jwt",{"_index":353,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authmodule",{"_index":177,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":948,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":147,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CustomValidationPipe.html":{},"injectables/JwtStrategy.html":{},"controllers/MyTestController.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["b",{"_index":506,"title":{},"body":{"controllers/MyTestController.html":{}}}],["backers",{"_index":939,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":300,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["badrequestexception('status",{"_index":614,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":311,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["badrequestexception(`\"${value",{"_index":618,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["baseentity",{"_index":539,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["bcrypt",{"_index":756,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["bcrypt.gensalt",{"_index":775,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":760,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["beforeinsert",{"_index":789,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["beforeinsert(event",{"_index":794,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["binary",{"_index":321,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["body",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["body('description",{"_index":689,"title":{},"body":{"controllers/TasksController.html":{}}}],["body('status",{"_index":700,"title":{},"body":{"controllers/TasksController.html":{}}}],["body('title",{"_index":688,"title":{},"body":{"controllers/TasksController.html":{}}}],["body(validationpipe",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":62,"title":{},"body":{"guards/AaGuard.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"controllers/MyTestController.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyLibraryModule.html":{},"modules/MyTestModule.html":{},"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":958,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":956,"title":{},"body":{"modules.html":{}}}],["building",{"_index":903,"title":{},"body":{"index.html":{}}}],["cacheinterceptor",{"_index":242,"title":{"injectables/CacheInterceptor.html":{}},"body":{"injectables/CacheInterceptor.html":{},"coverage.html":{}}}],["callhandler",{"_index":72,"title":{},"body":{"injectables/AaInterceptor.html":{},"injectables/CacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":57,"title":{},"body":{"guards/AaGuard.html":{},"guards/CustomAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":58,"title":{},"body":{"guards/AaGuard.html":{},"guards/CustomAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["catch",{"_index":23,"title":{},"body":{"classes/AaFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":24,"title":{},"body":{"classes/AaFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(forbiddenexception",{"_index":378,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":734,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["catcherror(err",{"_index":737,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["changes",{"_index":819,"title":{},"body":{"injectables/UsersService.html":{}}}],["check",{"_index":360,"title":{},"body":{"controllers/HealthController.html":{}}}],["class",{"_index":12,"title":{"classes/AaFilter.html":{},"classes/AaGateway.html":{},"classes/AaResolver.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{}},"body":{"injectables/Aa.html":{},"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"classes/AaResolver.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":17,"title":{},"body":{"classes/AaFilter.html":{},"classes/AaGateway.html":{},"classes/AaResolver.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"overview.html":{}}}],["client",{"_index":45,"title":{},"body":{"classes/AaGateway.html":{}}}],["cluster_appmodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":960,"title":{},"body":{"overview.html":{}}}],["cluster_appmodule_providers",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mylibrarymodule",{"_index":434,"title":{},"body":{"modules/MyLibraryModule.html":{},"overview.html":{}}}],["cluster_mylibrarymodule_exports",{"_index":435,"title":{},"body":{"modules/MyLibraryModule.html":{},"overview.html":{}}}],["cluster_mylibrarymodule_providers",{"_index":436,"title":{},"body":{"modules/MyLibraryModule.html":{},"overview.html":{}}}],["cluster_mytestmodule",{"_index":510,"title":{},"body":{"modules/MyTestModule.html":{},"overview.html":{}}}],["cluster_mytestmodule_providers",{"_index":511,"title":{},"body":{"modules/MyTestModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":703,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_imports",{"_index":704,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":705,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["column",{"_index":556,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["column()@apiproperty",{"_index":542,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["column({type",{"_index":546,"title":{},"body":{"classes/Task.html":{}}}],["common/decorator/get",{"_index":664,"title":{},"body":{"controllers/TasksController.html":{}}}],["common/decorator/roles.decorator",{"_index":480,"title":{},"body":{"controllers/MyTestController.html":{}}}],["common/filter/errors.filter",{"_index":481,"title":{},"body":{"controllers/MyTestController.html":{}}}],["common/guard/auth.guard",{"_index":482,"title":{},"body":{"controllers/MyTestController.html":{}}}],["common/guard/roles.guard",{"_index":484,"title":{},"body":{"controllers/MyTestController.html":{}}}],["common/interceptor/logging.interceptor",{"_index":485,"title":{},"body":{"controllers/MyTestController.html":{}}}],["common/interceptor/timeout.interceptor",{"_index":487,"title":{},"body":{"controllers/MyTestController.html":{}}}],["config",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["config.get('db",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('jwt",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configmodule.forroot",{"_index":1002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":771,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('username",{"_index":782,"title":{},"body":{"classes/UserRepository.html":{}}}],["connection",{"_index":792,"title":{},"body":{"classes/UserSubscriber.html":{},"injectables/UsersService.html":{}}}],["connection.subscribers.push(this",{"_index":800,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["console.log('before",{"_index":427,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":431,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`before",{"_index":801,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["const",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"classes/ForbiddenException.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{}}}],["constructor(connection",{"_index":791,"title":{},"body":{"classes/UserSubscriber.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":524,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(taskrepository",{"_index":712,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(userrepository",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["context",{"_index":61,"title":{},"body":{"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/GqlAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":534,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":533,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":291,"title":{},"body":{"guards/CustomAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":98,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MyTestController.html":{},"controllers/TasksController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MyTestController.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('health",{"_index":367,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('my",{"_index":488,"title":{},"body":{"controllers/MyTestController.html":{}}}],["controller('tasks",{"_index":677,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["coverage",{"_index":828,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":602,"title":{},"body":{"classes/TaskRepository.html":{}}}],["created",{"_index":630,"title":{},"body":{"controllers/TasksController.html":{}}}],["created.'})@apiresponse({status",{"_index":636,"title":{},"body":{"controllers/TasksController.html":{}}}],["createmany",{"_index":805,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmany(users",{"_index":807,"title":{},"body":{"injectables/UsersService.html":{}}}],["createparamdecorator",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtask",{"_index":567,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtask(@body",{"_index":687,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtask(createtaskdto",{"_index":571,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtaskarray",{"_index":622,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtaskarray(createtaskdto",{"_index":632,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtaskdto",{"_index":246,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["creating",{"_index":692,"title":{},"body":{"controllers/TasksController.html":{}}}],["credential.dto",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["credential.dto.ts",{"_index":156,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["credential.dto.ts:14",{"_index":165,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credential.dto.ts:7",{"_index":167,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":354,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getcontext().req",{"_index":356,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["ctx.getcontext().req.user",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":381,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":380,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentuser",{"_index":843,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":490,"title":{},"body":{"controllers/MyTestController.html":{}}}],["customauthguard",{"_index":282,"title":{"guards/CustomAuthGuard.html":{}},"body":{"guards/CustomAuthGuard.html":{},"controllers/MyTestController.html":{},"coverage.html":{}}}],["customvalidationpipe",{"_index":293,"title":{"injectables/CustomValidationPipe.html":{}},"body":{"injectables/CustomValidationPipe.html":{},"coverage.html":{}}}],["data",{"_index":518,"title":{},"body":{"interfaces/Response.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({description",{"_index":652,"title":{},"body":{"controllers/TasksController.html":{}}}],["database",{"_index":993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":399,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date.now",{"_index":429,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["dbconfig",{"_index":850,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbconfig.database",{"_index":995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.host",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.password",{"_index":992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.port",{"_index":988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.synchronize",{"_index":1001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.type",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.username",{"_index":990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyLibraryModule.html":{},"modules/MyTestModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["decorators",{"_index":42,"title":{},"body":{"classes/AaGateway.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/FileUploadDto.html":{},"classes/GetTasksFilterDto.html":{},"controllers/HealthController.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"classes/User.html":{}}}],["default",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":28,"title":{},"body":{"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":394,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["delete('/:id",{"_index":641,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetask",{"_index":623,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetask(id",{"_index":640,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dependencies",{"_index":112,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyLibraryModule.html":{},"modules/MyTestModule.html":{},"modules/TasksModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":249,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"index.html":{}}}],["development",{"_index":919,"title":{},"body":{"index.html":{}}}],["dns",{"_index":368,"title":{},"body":{"controllers/HealthController.html":{}}}],["dnshealthindicator",{"_index":363,"title":{},"body":{"controllers/HealthController.html":{}}}],["docs",{"_index":371,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":893,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto/auth",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["dto/create",{"_index":578,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dto/file",{"_index":674,"title":{},"body":{"controllers/TasksController.html":{}}}],["dto/get",{"_index":580,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["duplicate",{"_index":781,"title":{},"body":{"classes/UserRepository.html":{}}}],["e2e",{"_index":928,"title":{},"body":{"index.html":{}}}],["eager",{"_index":551,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["efficient",{"_index":904,"title":{},"body":{"index.html":{}}}],["entities",{"_index":996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":557,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["entityrepository",{"_index":577,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(task",{"_index":583,"title":{},"body":{"classes/TaskRepository.html":{}}}],["entityrepository(user",{"_index":772,"title":{},"body":{"classes/UserRepository.html":{}}}],["entitysubscriberinterface",{"_index":788,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["enum",{"_index":281,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{}}}],["enumerations",{"_index":887,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envconfig",{"_index":838,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":738,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":375,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["error.code",{"_index":779,"title":{},"body":{"classes/UserRepository.html":{}}}],["error.stack",{"_index":598,"title":{},"body":{"classes/TaskRepository.html":{}}}],["error['stack",{"_index":395,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errorobject",{"_index":387,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errors",{"_index":307,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"injectables/UsersService.html":{}}}],["errors.length",{"_index":309,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["event",{"_index":797,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["event.entity",{"_index":803,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["eventsubscriber",{"_index":799,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["exampleoneof",{"_index":250,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["exception",{"_index":34,"title":{},"body":{"classes/AaFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":325,"title":{},"body":{"classes/ForbiddenException.html":{},"coverage.html":{}}}],["exception.filter.ts:3",{"_index":328,"title":{},"body":{"classes/ForbiddenException.html":{}}}],["exception.getresponse",{"_index":386,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":383,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":389,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":393,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":20,"title":{},"body":{"classes/AaFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exceptionresponse",{"_index":385,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionresponse.message",{"_index":388,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":59,"title":{},"body":{"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/GqlAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":784,"title":{},"body":{"classes/UserRepository.html":{}}}],["expiresin",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":11,"title":{},"body":{"injectables/Aa.html":{},"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"classes/AaResolver.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyLibraryModule.html":{},"modules/MyTestModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["express",{"_index":289,"title":{},"body":{"guards/CustomAuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"controllers/TasksController.html":{},"dependencies.html":{}}}],["extends",{"_index":326,"title":{},"body":{"classes/ForbiddenException.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":312,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"classes/TaskRepository.html":{}}}],["false",{"_index":290,"title":{},"body":{"guards/CustomAuthGuard.html":{},"classes/Task.html":{}}}],["false})@apiproperty({type",{"_index":552,"title":{},"body":{"classes/Task.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/Aa.html":{},"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"classes/AaResolver.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["fileinterceptor",{"_index":672,"title":{},"body":{"controllers/TasksController.html":{}}}],["fileuploaddto",{"_index":317,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["filter.dto",{"_index":581,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["filter.dto.ts",{"_index":335,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:11",{"_index":338,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["filter.dto.ts:7",{"_index":340,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["filterdto",{"_index":575,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["filters",{"_index":596,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["finally",{"_index":822,"title":{},"body":{"injectables/UsersService.html":{}}}],["forbidden",{"_index":638,"title":{},"body":{"controllers/TasksController.html":{}}}],["forbiddenexception",{"_index":323,"title":{"classes/ForbiddenException.html":{}},"body":{"classes/ForbiddenException.html":{},"controllers/MyTestController.html":{},"coverage.html":{}}}],["format",{"_index":320,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["found",{"_index":722,"title":{},"body":{"injectables/TasksService.html":{}}}],["framework",{"_index":902,"title":{},"body":{"index.html":{}}}],["function",{"_index":83,"title":{},"body":{"injectables/AaMiddleware.html":{},"controllers/MyTestController.html":{},"coverage.html":{}}}],["functions",{"_index":894,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":644,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('t1",{"_index":461,"title":{},"body":{"controllers/MyTestController.html":{}}}],["get('t2",{"_index":463,"title":{},"body":{"controllers/MyTestController.html":{}}}],["get('t3",{"_index":491,"title":{},"body":{"controllers/MyTestController.html":{}}}],["get('t3')@usefilters(httpexceptionfilter",{"_index":465,"title":{},"body":{"controllers/MyTestController.html":{}}}],["get('t4",{"_index":493,"title":{},"body":{"controllers/MyTestController.html":{}}}],["get('t4')@roles('admin')@useguards(rolesguard",{"_index":467,"title":{},"body":{"controllers/MyTestController.html":{}}}],["get('t5",{"_index":496,"title":{},"body":{"controllers/MyTestController.html":{}}}],["get('t5')@useguards(customauthguard",{"_index":469,"title":{},"body":{"controllers/MyTestController.html":{}}}],["get('t6",{"_index":498,"title":{},"body":{"controllers/MyTestController.html":{}}}],["get('t6')@useinterceptors(logginginterceptor)@useinterceptors(timeoutinterceptor",{"_index":471,"title":{},"body":{"controllers/MyTestController.html":{}}}],["get('t7",{"_index":507,"title":{},"body":{"controllers/MyTestController.html":{}}}],["get('t7')@render('index",{"_index":473,"title":{},"body":{"controllers/MyTestController.html":{}}}],["get()@healthcheck",{"_index":361,"title":{},"body":{"controllers/HealthController.html":{}}}],["gethello",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getrequest",{"_index":348,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getrequest(context",{"_index":349,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getschemapath",{"_index":270,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["getschemapath(mytest",{"_index":279,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["getschemapath(mytest2",{"_index":280,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["gettaskbyid",{"_index":624,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettaskbyid(id",{"_index":643,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasks",{"_index":568,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasks(filterdto",{"_index":573,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasksfilterdto",{"_index":332,"title":{"classes/GetTasksFilterDto.html":{}},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["getting",{"_index":898,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":663,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gqlauthguard",{"_index":346,"title":{"injectables/GqlAuthGuard.html":{}},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":352,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":355,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":934,"title":{},"body":{"index.html":{}}}],["guard",{"_index":53,"title":{"guards/AaGuard.html":{},"guards/CustomAuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":55,"title":{},"body":{"guards/AaGuard.html":{},"guards/CustomAuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["handlemessage",{"_index":39,"title":{},"body":{"classes/AaGateway.html":{}}}],["handlemessage(client",{"_index":40,"title":{},"body":{"classes/AaGateway.html":{}}}],["hash",{"_index":759,"title":{},"body":{"classes/User.html":{}}}],["hashpassword",{"_index":764,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":766,"title":{},"body":{"classes/UserRepository.html":{}}}],["hbs",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["health",{"_index":359,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheck",{"_index":364,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":365,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":357,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["heavily",{"_index":909,"title":{},"body":{"index.html":{}}}],["hello",{"_index":51,"title":{},"body":{"classes/AaGateway.html":{},"injectables/AppService.html":{},"classes/MyTest.html":{},"controllers/MyTestController.html":{}}}],["hello2",{"_index":448,"title":{},"body":{"classes/MyTest2.html":{}}}],["here",{"_index":945,"title":{},"body":{"index.html":{}}}],["host",{"_index":26,"title":{},"body":{"classes/AaFilter.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":379,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":327,"title":{},"body":{"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"controllers/MyTestController.html":{}}}],["httpexception('this",{"_index":489,"title":{},"body":{"controllers/MyTestController.html":{}}}],["httpexceptionfilter",{"_index":373,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"controllers/MyTestController.html":{},"coverage.html":{}}}],["https://docs.nestjs.com",{"_index":372,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://nestjs.com",{"_index":952,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":329,"title":{},"body":{"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"controllers/MyTestController.html":{}}}],["httpstatus.forbidden",{"_index":331,"title":{},"body":{"classes/ForbiddenException.html":{},"controllers/MyTestController.html":{}}}],["httpstatus.internal_server_error",{"_index":384,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["id",{"_index":540,"title":{},"body":{"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{}}}],["identifier",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":19,"title":{},"body":{"classes/AaFilter.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UserSubscriber.html":{}}}],["import",{"_index":8,"title":{},"body":{"injectables/Aa.html":{},"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"classes/AaResolver.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["in_progress",{"_index":892,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":21,"title":{"index.html":{}},"body":{"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/Aa.html":{},"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"classes/AaResolver.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/Aa.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CustomValidationPipe.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MyLibraryService.html":{},"injectables/MyTestService.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}},"body":{"injectables/Aa.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MyLibraryService.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/Aa.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CustomValidationPipe.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MyLibraryService.html":{},"injectables/MyTestService.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{}}}],["injectrepository(taskrepository",{"_index":720,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(userrepository",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["inserted",{"_index":802,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["insertevent",{"_index":795,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["inspired",{"_index":910,"title":{},"body":{"index.html":{}}}],["installation",{"_index":915,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":917,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":382,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["instantiated",{"_index":826,"title":{},"body":{"injectables/UsersService.html":{}}}],["intercept",{"_index":69,"title":{},"body":{"injectables/AaInterceptor.html":{},"injectables/CacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":70,"title":{},"body":{"injectables/AaInterceptor.html":{},"injectables/CacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":402,"title":{"interfaces/JwtPayload.html":{},"interfaces/Response.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":403,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":576,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["invalid",{"_index":619,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["iscached",{"_index":245,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["isglobal",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isin",{"_index":341,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isin([taskstatus.open",{"_index":343,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isnotempty",{"_index":272,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{}}}],["isnotempty()@apiproperty({description",{"_index":254,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{}}}],["isoptional",{"_index":342,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isoptional()@isin(undefined",{"_index":339,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isoptional()@isnotempty",{"_index":337,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isstatusvalid",{"_index":608,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isstatusvalid(status",{"_index":610,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isstring",{"_index":168,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isstring()@minlength(4)@maxlength(20",{"_index":166,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["jj",{"_index":251,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["join",{"_index":941,"title":{},"body":{"index.html":{}}}],["json.stringify",{"_index":597,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["json.stringify(createtaskdto",{"_index":603,"title":{},"body":{"classes/TaskRepository.html":{}}}],["json.stringify(payload",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtconfig",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig.secret",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":418,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":227,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":181,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":949,"title":{},"body":{"index.html":{}}}],["legend",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyLibraryModule.html":{},"modules/MyTestModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["lets",{"_index":817,"title":{},"body":{"injectables/UsersService.html":{}}}],["library.module.ts",{"_index":440,"title":{},"body":{"modules/MyLibraryModule.html":{}}}],["library.service",{"_index":441,"title":{},"body":{"modules/MyLibraryModule.html":{}}}],["library.service.ts",{"_index":442,"title":{},"body":{"injectables/MyLibraryService.html":{},"coverage.html":{}}}],["library/src/my",{"_index":439,"title":{},"body":{"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"coverage.html":{}}}],["libs/my",{"_index":438,"title":{},"body":{"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"coverage.html":{}}}],["license",{"_index":955,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":932,"title":{},"body":{"index.html":{}}}],["listento",{"_index":790,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["logger",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logger('authservice",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger('taskrepository",{"_index":569,"title":{},"body":{"classes/TaskRepository.html":{}}}],["logger('taskscontroller",{"_index":679,"title":{},"body":{"controllers/TasksController.html":{}}}],["logger(req",{"_index":897,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":422,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{},"controllers/MyTestController.html":{},"coverage.html":{}}}],["made",{"_index":820,"title":{},"body":{"injectables/UsersService.html":{}}}],["manually",{"_index":825,"title":{},"body":{"injectables/UsersService.html":{}}}],["manytoone",{"_index":558,"title":{},"body":{"classes/Task.html":{}}}],["manytoone(undefined",{"_index":550,"title":{},"body":{"classes/Task.html":{}}}],["map",{"_index":519,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["matchedroles",{"_index":523,"title":{},"body":{"guards/RolesGuard.html":{}}}],["matchedroles(roles",{"_index":528,"title":{},"body":{"guards/RolesGuard.html":{}}}],["matches",{"_index":169,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":176,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matching",{"_index":14,"title":{},"body":{"injectables/Aa.html":{},"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"classes/AaResolver.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":170,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["maxlength(20",{"_index":174,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["message",{"_index":163,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/HttpExceptionFilter.html":{},"controllers/MyTestController.html":{}}}],["metadata",{"_index":89,"title":{},"body":{"injectables/AaPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":298,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["methods",{"_index":22,"title":{},"body":{"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MyTestController.html":{},"guards/RolesGuard.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":171,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(4",{"_index":173,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(8",{"_index":175,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(8)@maxlength(20)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":160,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["miscellaneous",{"_index":886,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":931,"title":{},"body":{"index.html":{}}}],["mode",{"_index":923,"title":{},"body":{"index.html":{}}}],["module",{"_index":109,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyLibraryModule.html":{},"modules/MyTestModule.html":{},"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyLibraryModule.html":{},"modules/MyTestModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["modules",{"_index":111,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyLibraryModule.html":{},"modules/MyTestModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":944,"title":{},"body":{"index.html":{}}}],["mylibrarymodule",{"_index":433,"title":{"modules/MyLibraryModule.html":{}},"body":{"modules/MyLibraryModule.html":{},"modules.html":{},"overview.html":{}}}],["mylibraryservice",{"_index":437,"title":{"injectables/MyLibraryService.html":{}},"body":{"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"coverage.html":{},"overview.html":{}}}],["mytest",{"_index":257,"title":{"classes/MyTest.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/MyTest.html":{},"coverage.html":{}}}],["mytest2",{"_index":258,"title":{"classes/MyTest2.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/MyTest2.html":{},"coverage.html":{}}}],["mytestcontroller",{"_index":451,"title":{"controllers/MyTestController.html":{}},"body":{"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"coverage.html":{}}}],["mytestmodule",{"_index":509,"title":{"modules/MyTestModule.html":{}},"body":{"modules/MyTestModule.html":{},"modules.html":{},"overview.html":{}}}],["mytestservice",{"_index":512,"title":{"injectables/MyTestService.html":{}},"body":{"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"coverage.html":{},"overview.html":{}}}],["myśliwiec",{"_index":950,"title":{},"body":{"index.html":{}}}],["name",{"_index":31,"title":{},"body":{"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":823,"title":{},"body":{"injectables/UsersService.html":{}}}],["nest",{"_index":912,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":954,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":74,"title":{},"body":{"injectables/AaInterceptor.html":{},"injectables/CacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs/common",{"_index":10,"title":{},"body":{"injectables/Aa.html":{},"classes/AaFilter.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/ForbiddenException.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":531,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":97,"title":{},"body":{"classes/AaResolver.html":{},"injectables/GqlAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":673,"title":{},"body":{"controllers/TasksController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":271,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/FileUploadDto.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"classes/User.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":366,"title":{},"body":{"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":49,"title":{},"body":{"classes/AaGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":84,"title":{},"body":{"injectables/AaMiddleware.html":{}}}],["new",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CustomValidationPipe.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/MyTestController.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["next",{"_index":71,"title":{},"body":{"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/CacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["next.handle",{"_index":75,"title":{},"body":{"injectables/AaInterceptor.html":{},"injectables/CacheInterceptor.html":{}}}],["next.handle().pipe",{"_index":430,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["next.handle().pipe(map(data",{"_index":521,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["node.js",{"_index":901,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":719,"title":{},"body":{"injectables/TasksService.html":{}}}],["notfoundexception(`task",{"_index":724,"title":{},"body":{"injectables/TasksService.html":{}}}],["now",{"_index":428,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":432,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":916,"title":{},"body":{"index.html":{}}}],["null",{"_index":505,"title":{},"body":{"controllers/MyTestController.html":{},"classes/UserRepository.html":{}}}],["number",{"_index":314,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{}}}],["object",{"_index":305,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["observable",{"_index":64,"title":{},"body":{"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["oneof",{"_index":277,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["onetomany",{"_index":754,"title":{},"body":{"classes/User.html":{}}}],["onetomany(undefined",{"_index":748,"title":{},"body":{"classes/User.html":{}}}],["open",{"_index":891,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["optional",{"_index":33,"title":{},"body":{"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyLibraryModule.html":{},"modules/MyTestModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["overview",{"_index":959,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":857,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":654,"title":{},"body":{"controllers/TasksController.html":{}}}],["param('id",{"_index":685,"title":{},"body":{"controllers/TasksController.html":{}}}],["parameters",{"_index":30,"title":{},"body":{"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parseintpipe",{"_index":655,"title":{},"body":{"controllers/TasksController.html":{}}}],["passport",{"_index":413,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":410,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":416,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":158,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":656,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id/status",{"_index":648,"title":{},"body":{"controllers/TasksController.html":{}}}],["path",{"_index":400,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":41,"title":{},"body":{"classes/AaGateway.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":405,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["pg",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["pipes/task",{"_index":659,"title":{},"body":{"controllers/TasksController.html":{}}}],["pipetransform",{"_index":93,"title":{},"body":{"injectables/AaPipe.html":{},"injectables/CustomValidationPipe.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["plaintoclass",{"_index":302,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":306,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["please",{"_index":942,"title":{},"body":{"index.html":{}}}],["port",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('/array",{"_index":694,"title":{},"body":{"controllers/TasksController.html":{}}}],["post('/array')@usepipes(validationpipe)@apibody({type",{"_index":633,"title":{},"body":{"controllers/TasksController.html":{}}}],["post('/file",{"_index":695,"title":{},"body":{"controllers/TasksController.html":{}}}],["post('/file')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":651,"title":{},"body":{"controllers/TasksController.html":{}}}],["post('/signin",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@usepipes(validationpipe)@apicreatedresponse({description",{"_index":627,"title":{},"body":{"controllers/TasksController.html":{}}}],["prefix",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MyTestController.html":{},"controllers/TasksController.html":{}}}],["primarygeneratedcolumn",{"_index":559,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["primarygeneratedcolumn()@apiproperty",{"_index":544,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["private",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CustomValidationPipe.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{}}}],["process.env.database_url",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_port",{"_index":987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_synchronize",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_type",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["process.env.node_eng",{"_index":390,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["production",{"_index":391,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["progressive",{"_index":900,"title":{},"body":{"index.html":{}}}],["project",{"_index":933,"title":{},"body":{"index.html":{}}}],["promise",{"_index":63,"title":{},"body":{"guards/AaGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CustomAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["promise(resolve",{"_index":502,"title":{},"body":{"controllers/MyTestController.html":{}}}],["properties",{"_index":157,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/FileUploadDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JwtPayload.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"interfaces/Response.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/User.html":{}}}],["providers",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyLibraryModule.html":{},"modules/MyTestModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["query",{"_index":584,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["query(validationpipe",{"_index":681,"title":{},"body":{"controllers/TasksController.html":{}}}],["query.andwhere",{"_index":589,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.andwhere('task.status",{"_index":588,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.getmany",{"_index":593,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.where('task.userid",{"_index":586,"title":{},"body":{"classes/TaskRepository.html":{}}}],["queryrunner",{"_index":810,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.committransaction",{"_index":816,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.connect",{"_index":812,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.manager.save(users[0",{"_index":814,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.manager.save(users[1",{"_index":815,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.release",{"_index":827,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":821,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.starttransaction",{"_index":813,"title":{},"body":{"injectables/UsersService.html":{}}}],["read",{"_index":943,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["record",{"_index":628,"title":{},"body":{"controllers/TasksController.html":{}}}],["ref",{"_index":278,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["reflect",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":525,"title":{},"body":{"guards/RolesGuard.html":{}}}],["release",{"_index":824,"title":{},"body":{"injectables/UsersService.html":{}}}],["render",{"_index":475,"title":{},"body":{"controllers/MyTestController.html":{}}}],["render('index",{"_index":508,"title":{},"body":{"controllers/MyTestController.html":{}}}],["repository",{"_index":566,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["req",{"_index":82,"title":{},"body":{"injectables/AaMiddleware.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":287,"title":{},"body":{"guards/CustomAuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"guards/RolesGuard.html":{}}}],["request.url",{"_index":401,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":535,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requesttimeoutexception",{"_index":731,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["required",{"_index":615,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["res",{"_index":80,"title":{},"body":{"injectables/AaMiddleware.html":{},"miscellaneous/functions.html":{}}}],["reset",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyLibraryModule.html":{},"modules/MyTestModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["resolver",{"_index":96,"title":{},"body":{"classes/AaResolver.html":{}}}],["response",{"_index":377,"title":{"interfaces/Response.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["response.status(status).json",{"_index":396,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":13,"title":{},"body":{"injectables/Aa.html":{},"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"classes/AaResolver.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.affected",{"_index":727,"title":{},"body":{"injectables/TasksService.html":{}}}],["results",{"_index":15,"title":{},"body":{"injectables/Aa.html":{},"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"classes/AaResolver.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retreiving",{"_index":683,"title":{},"body":{"controllers/TasksController.html":{}}}],["return",{"_index":50,"title":{},"body":{"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaPipe.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MyTestController.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":35,"title":{},"body":{"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MyTestController.html":{},"guards/RolesGuard.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["roles",{"_index":479,"title":{},"body":{"controllers/MyTestController.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":494,"title":{},"body":{"controllers/MyTestController.html":{}}}],["rolesguard",{"_index":483,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/MyTestController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rollback",{"_index":818,"title":{},"body":{"injectables/UsersService.html":{}}}],["run",{"_index":920,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":65,"title":{},"body":{"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/CacheInterceptor.html":{},"guards/CustomAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":426,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["salt",{"_index":743,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["scalable",{"_index":905,"title":{},"body":{"index.html":{}}}],["search",{"_index":336,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{}}}],["secret",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":906,"title":{},"body":{"index.html":{}}}],["setmetadata('aa",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settimeout(resolve",{"_index":503,"title":{},"body":{"controllers/MyTestController.html":{}}}],["side",{"_index":907,"title":{},"body":{"index.html":{}}}],["signin",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(authcredentialsdto",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signup(authcredentialsdto",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["sleep",{"_index":501,"title":{},"body":{"controllers/MyTestController.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/Aa.html":{},"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"classes/AaResolver.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/ForbiddenException.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/MyLibraryModule.html":{},"injectables/MyLibraryService.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":936,"title":{},"body":{"index.html":{}}}],["stack",{"_index":392,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["start",{"_index":921,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":924,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":925,"title":{},"body":{"index.html":{}}}],["started",{"_index":899,"title":{"index.html":{}},"body":{}}],["starter",{"_index":914,"title":{},"body":{"index.html":{}}}],["starter/src/app.module.ts",{"_index":837,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["starter/src/auth/auth.controller.ts",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["starter/src/auth/auth.controller.ts:10",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["starter/src/auth/auth.controller.ts:17",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["starter/src/auth/auth.module.ts",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["starter/src/auth/auth.service.ts",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["starter/src/auth/auth.service.ts:10",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["starter/src/auth/auth.service.ts:18",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["starter/src/auth/auth.service.ts:22",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["starter/src/auth/dto/auth",{"_index":155,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["starter/src/auth/graphql",{"_index":841,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["starter/src/auth/graphql.guard.ts",{"_index":347,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["starter/src/auth/graphql.guard.ts:7",{"_index":350,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["starter/src/auth/jwt",{"_index":404,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["starter/src/auth/jwt.strategy.ts",{"_index":406,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["starter/src/auth/jwt.strategy.ts:13",{"_index":407,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["starter/src/auth/jwt.strategy.ts:24",{"_index":409,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["starter/src/auth/user.entity.ts",{"_index":742,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["starter/src/auth/user.entity.ts:18",{"_index":745,"title":{},"body":{"classes/User.html":{}}}],["starter/src/auth/user.entity.ts:22",{"_index":751,"title":{},"body":{"classes/User.html":{}}}],["starter/src/auth/user.entity.ts:25",{"_index":746,"title":{},"body":{"classes/User.html":{}}}],["starter/src/auth/user.entity.ts:28",{"_index":747,"title":{},"body":{"classes/User.html":{}}}],["starter/src/auth/user.entity.ts:36",{"_index":750,"title":{},"body":{"classes/User.html":{}}}],["starter/src/auth/user.entity.ts:38",{"_index":753,"title":{},"body":{"classes/User.html":{}}}],["starter/src/auth/user.repository.ts",{"_index":763,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["starter/src/auth/user.repository.ts:12",{"_index":768,"title":{},"body":{"classes/UserRepository.html":{}}}],["starter/src/auth/user.repository.ts:31",{"_index":770,"title":{},"body":{"classes/UserRepository.html":{}}}],["starter/src/auth/user.repository.ts:42",{"_index":767,"title":{},"body":{"classes/UserRepository.html":{}}}],["starter/src/auth/user.subscriber.ts",{"_index":787,"title":{},"body":{"classes/UserSubscriber.html":{},"coverage.html":{}}}],["starter/src/auth/user.subscriber.ts:10",{"_index":798,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["starter/src/auth/user.subscriber.ts:14",{"_index":796,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["starter/src/auth/user.subscriber.ts:5",{"_index":793,"title":{},"body":{"classes/UserSubscriber.html":{}}}],["starter/src/auth/users.service.ts",{"_index":804,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["starter/src/auth/users.service.ts:6",{"_index":806,"title":{},"body":{"injectables/UsersService.html":{}}}],["starter/src/auth/users.service.ts:9",{"_index":808,"title":{},"body":{"injectables/UsersService.html":{}}}],["starter/src/common/decorator/get",{"_index":846,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["starter/src/common/decorator/roles.decorator.ts",{"_index":847,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["starter/src/common/filter/errors.filter.ts",{"_index":374,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["starter/src/common/filter/errors.filter.ts:13",{"_index":376,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["starter/src/common/filter/forbidden",{"_index":324,"title":{},"body":{"classes/ForbiddenException.html":{},"coverage.html":{}}}],["starter/src/common/guard/auth.guard.ts",{"_index":283,"title":{},"body":{"guards/CustomAuthGuard.html":{},"coverage.html":{}}}],["starter/src/common/guard/auth.guard.ts:12",{"_index":285,"title":{},"body":{"guards/CustomAuthGuard.html":{}}}],["starter/src/common/guard/auth.guard.ts:7",{"_index":288,"title":{},"body":{"guards/CustomAuthGuard.html":{}}}],["starter/src/common/guard/roles.guard.ts",{"_index":522,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["starter/src/common/guard/roles.guard.ts:13",{"_index":527,"title":{},"body":{"guards/RolesGuard.html":{}}}],["starter/src/common/guard/roles.guard.ts:6",{"_index":526,"title":{},"body":{"guards/RolesGuard.html":{}}}],["starter/src/common/guard/roles.guard.ts:9",{"_index":530,"title":{},"body":{"guards/RolesGuard.html":{}}}],["starter/src/common/interceptor/cache.interceptor.ts",{"_index":243,"title":{},"body":{"injectables/CacheInterceptor.html":{},"coverage.html":{}}}],["starter/src/common/interceptor/cache.interceptor.ts:11",{"_index":244,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["starter/src/common/interceptor/logging.interceptor.ts",{"_index":423,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["starter/src/common/interceptor/logging.interceptor.ts:12",{"_index":424,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["starter/src/common/interceptor/timeout.interceptor.ts",{"_index":729,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["starter/src/common/interceptor/timeout.interceptor.ts:13",{"_index":730,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["starter/src/common/interceptor/transform.interceptor.ts",{"_index":517,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["starter/src/common/interceptor/transform.interceptor.ts:17",{"_index":741,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["starter/src/common/middleware/logger.middleware.ts",{"_index":848,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["starter/src/common/pipes/validation.pipe.ts",{"_index":294,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"coverage.html":{}}}],["starter/src/common/pipes/validation.pipe.ts:19",{"_index":297,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["starter/src/common/pipes/validation.pipe.ts:7",{"_index":299,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["starter/src/config/typeorm.config.ts",{"_index":849,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["starter/src/health/health.controller.ts",{"_index":358,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["starter/src/health/health.controller.ts:13",{"_index":362,"title":{},"body":{"controllers/HealthController.html":{}}}],["starter/src/main.ts",{"_index":852,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["starter/src/my",{"_index":452,"title":{},"body":{"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"coverage.html":{}}}],["starter/src/tasks/dto/create",{"_index":247,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["starter/src/tasks/dto/file",{"_index":318,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["starter/src/tasks/dto/get",{"_index":333,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["starter/src/tasks/dto/my",{"_index":443,"title":{},"body":{"classes/MyTest.html":{},"classes/MyTest2.html":{},"coverage.html":{}}}],["starter/src/tasks/pipes/task",{"_index":605,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["starter/src/tasks/task",{"_index":890,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["starter/src/tasks/task.entity.ts",{"_index":538,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["starter/src/tasks/task.entity.ts:16",{"_index":545,"title":{},"body":{"classes/Task.html":{}}}],["starter/src/tasks/task.entity.ts:20",{"_index":549,"title":{},"body":{"classes/Task.html":{}}}],["starter/src/tasks/task.entity.ts:24",{"_index":543,"title":{},"body":{"classes/Task.html":{}}}],["starter/src/tasks/task.entity.ts:35",{"_index":548,"title":{},"body":{"classes/Task.html":{}}}],["starter/src/tasks/task.entity.ts:43",{"_index":553,"title":{},"body":{"classes/Task.html":{}}}],["starter/src/tasks/task.entity.ts:47",{"_index":555,"title":{},"body":{"classes/Task.html":{}}}],["starter/src/tasks/task.repository.ts",{"_index":565,"title":{},"body":{"classes/TaskRepository.html":{},"coverage.html":{}}}],["starter/src/tasks/task.repository.ts:11",{"_index":570,"title":{},"body":{"classes/TaskRepository.html":{}}}],["starter/src/tasks/task.repository.ts:13",{"_index":574,"title":{},"body":{"classes/TaskRepository.html":{}}}],["starter/src/tasks/task.repository.ts:44",{"_index":572,"title":{},"body":{"classes/TaskRepository.html":{}}}],["starter/src/tasks/tasks.controller.ts",{"_index":621,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["starter/src/tasks/tasks.controller.ts:117",{"_index":653,"title":{},"body":{"controllers/TasksController.html":{}}}],["starter/src/tasks/tasks.controller.ts:120",{"_index":642,"title":{},"body":{"controllers/TasksController.html":{}}}],["starter/src/tasks/tasks.controller.ts:128",{"_index":649,"title":{},"body":{"controllers/TasksController.html":{}}}],["starter/src/tasks/tasks.controller.ts:48",{"_index":646,"title":{},"body":{"controllers/TasksController.html":{}}}],["starter/src/tasks/tasks.controller.ts:61",{"_index":645,"title":{},"body":{"controllers/TasksController.html":{}}}],["starter/src/tasks/tasks.controller.ts:79",{"_index":631,"title":{},"body":{"controllers/TasksController.html":{}}}],["starter/src/tasks/tasks.controller.ts:99",{"_index":639,"title":{},"body":{"controllers/TasksController.html":{}}}],["starter/src/tasks/tasks.module.ts",{"_index":706,"title":{},"body":{"modules/TasksModule.html":{}}}],["starter/src/tasks/tasks.service.ts",{"_index":711,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["starter/src/tasks/tasks.service.ts:11",{"_index":713,"title":{},"body":{"injectables/TasksService.html":{}}}],["starter/src/tasks/tasks.service.ts:17",{"_index":717,"title":{},"body":{"injectables/TasksService.html":{}}}],["starter/src/tasks/tasks.service.ts:21",{"_index":716,"title":{},"body":{"injectables/TasksService.html":{}}}],["starter/src/tasks/tasks.service.ts:33",{"_index":714,"title":{},"body":{"injectables/TasksService.html":{}}}],["starter/src/tasks/tasks.service.ts:37",{"_index":715,"title":{},"body":{"injectables/TasksService.html":{}}}],["starter/src/tasks/tasks.service.ts:45",{"_index":718,"title":{},"body":{"injectables/TasksService.html":{}}}],["statements",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":252,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["status.enum",{"_index":273,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["status.enum.ts",{"_index":889,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":397,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":946,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":46,"title":{},"body":{"classes/AaGateway.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JwtPayload.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"controllers/MyTestController.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["subscribemessage",{"_index":47,"title":{},"body":{"classes/AaGateway.html":{}}}],["subscribemessage('message",{"_index":43,"title":{},"body":{"classes/AaGateway.html":{}}}],["successfully",{"_index":629,"title":{},"body":{"controllers/TasksController.html":{}}}],["super",{"_index":417,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super('forbidden",{"_index":330,"title":{},"body":{"classes/ForbiddenException.html":{}}}],["support",{"_index":937,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":957,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":25,"title":{},"body":{"classes/AaFilter.html":{},"controllers/MyTestController.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["t2",{"_index":455,"title":{},"body":{"controllers/MyTestController.html":{}}}],["t3",{"_index":456,"title":{},"body":{"controllers/MyTestController.html":{}}}],["t4",{"_index":457,"title":{},"body":{"controllers/MyTestController.html":{}}}],["t5",{"_index":458,"title":{},"body":{"controllers/MyTestController.html":{}}}],["t6",{"_index":459,"title":{},"body":{"controllers/MyTestController.html":{}}}],["t7",{"_index":460,"title":{},"body":{"controllers/MyTestController.html":{}}}],["table",{"_index":856,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":855,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":425,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["task",{"_index":255,"title":{"classes/Task.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["task.description",{"_index":591,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.dto",{"_index":579,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.dto.ts",{"_index":248,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:13",{"_index":267,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:19",{"_index":256,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:22",{"_index":263,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:27",{"_index":261,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:30",{"_index":266,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.entity",{"_index":582,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.repository",{"_index":708,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["task.save",{"_index":601,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["task.status",{"_index":599,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["task.title",{"_index":590,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.user",{"_index":600,"title":{},"body":{"classes/TaskRepository.html":{},"classes/User.html":{}}}],["taskrepository",{"_index":564,"title":{"classes/TaskRepository.html":{}},"body":{"classes/TaskRepository.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks",{"_index":334,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"coverage.html":{}}}],["tasks.controller",{"_index":709,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":662,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/task.entity",{"_index":757,"title":{},"body":{"classes/User.html":{}}}],["taskscontroller",{"_index":620,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["taskservice",{"_index":680,"title":{},"body":{"controllers/TasksController.html":{}}}],["tasksmodule",{"_index":702,"title":{"modules/TasksModule.html":{}},"body":{"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":661,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":264,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.done",{"_index":345,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["taskstatus.in_progress",{"_index":344,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["taskstatus.open",{"_index":562,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["taskstatusvalidationpipe",{"_index":604,"title":{"classes/TaskStatusValidationPipe.html":{}},"body":{"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["test",{"_index":445,"title":{},"body":{"classes/MyTest.html":{},"controllers/MyTestController.html":{},"index.html":{}}}],["test.controller",{"_index":515,"title":{},"body":{"modules/MyTestModule.html":{}}}],["test.controller.ts",{"_index":454,"title":{},"body":{"controllers/MyTestController.html":{},"coverage.html":{}}}],["test.controller.ts:23",{"_index":462,"title":{},"body":{"controllers/MyTestController.html":{}}}],["test.controller.ts:28",{"_index":464,"title":{},"body":{"controllers/MyTestController.html":{}}}],["test.controller.ts:34",{"_index":466,"title":{},"body":{"controllers/MyTestController.html":{}}}],["test.controller.ts:41",{"_index":468,"title":{},"body":{"controllers/MyTestController.html":{}}}],["test.controller.ts:47",{"_index":470,"title":{},"body":{"controllers/MyTestController.html":{}}}],["test.controller.ts:54",{"_index":472,"title":{},"body":{"controllers/MyTestController.html":{}}}],["test.controller.ts:66",{"_index":474,"title":{},"body":{"controllers/MyTestController.html":{}}}],["test.dto",{"_index":274,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["test.dto.ts",{"_index":444,"title":{},"body":{"classes/MyTest.html":{},"coverage.html":{}}}],["test.dto.ts:9",{"_index":446,"title":{},"body":{"classes/MyTest.html":{}}}],["test.module.ts",{"_index":513,"title":{},"body":{"modules/MyTestModule.html":{}}}],["test.service",{"_index":514,"title":{},"body":{"modules/MyTestModule.html":{}}}],["test.service.ts",{"_index":516,"title":{},"body":{"injectables/MyTestService.html":{},"coverage.html":{}}}],["test/my",{"_index":453,"title":{},"body":{"controllers/MyTestController.html":{},"modules/MyTestModule.html":{},"injectables/MyTestService.html":{},"coverage.html":{}}}],["test2",{"_index":449,"title":{},"body":{"classes/MyTest2.html":{}}}],["test2.dto",{"_index":275,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["test2.dto.ts",{"_index":447,"title":{},"body":{"classes/MyTest2.html":{},"coverage.html":{}}}],["test2.dto.ts:9",{"_index":450,"title":{},"body":{"classes/MyTest2.html":{}}}],["test:covsupport",{"_index":930,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":929,"title":{},"body":{"index.html":{}}}],["tests",{"_index":927,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":935,"title":{},"body":{"index.html":{}}}],["this.allowedstatuses.includes(status",{"_index":613,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["this.appservice.gethello",{"_index":108,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(authcredentialsdto",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(authcredentialsdto",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.connection.createqueryrunner",{"_index":811,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.create",{"_index":773,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.createquerybuilder('task",{"_index":585,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.dns.pingcheck('nestjs",{"_index":370,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.findone",{"_index":785,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.gettaskbyid(id",{"_index":728,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.hashpassword(password",{"_index":777,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.health.check",{"_index":369,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.isstatusvalid(value",{"_index":617,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["this.jwtservice.sign(payload",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":594,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.logger.verbose",{"_index":682,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.matchedroles(roles",{"_index":536,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.password",{"_index":762,"title":{},"body":{"classes/User.html":{}}}],["this.reflector.getallandmerge('roles",{"_index":532,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.salt",{"_index":761,"title":{},"body":{"classes/User.html":{}}}],["this.taskrepository.createtask(createtaskdto",{"_index":725,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.delete",{"_index":726,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.findone",{"_index":723,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.gettasks(filterdto",{"_index":721,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskservice.createtask(createtaskdto",{"_index":693,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.deletetask(id",{"_index":699,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.gettaskbyid(id",{"_index":686,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.gettasks(filterdto",{"_index":684,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.updatetaskstatus(id",{"_index":701,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tovalidate(metatype",{"_index":304,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["this.userrepository.findone",{"_index":421,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userrepository.signup(authcredentialsdto",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.validateuserpassword",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validaterequest(request",{"_index":292,"title":{},"body":{"guards/CustomAuthGuard.html":{}}}],["throw",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CustomValidationPipe.html":{},"injectables/JwtStrategy.html":{},"controllers/MyTestController.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{}}}],["throwerror",{"_index":732,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["throwerror(err",{"_index":740,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["throwerror(new",{"_index":739,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout",{"_index":735,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout(5000",{"_index":736,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeouterror",{"_index":733,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":486,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"controllers/MyTestController.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":398,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":253,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["token",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":947,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":295,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":296,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["transform",{"_index":87,"title":{},"body":{"injectables/AaPipe.html":{},"injectables/CustomValidationPipe.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["transform(value",{"_index":88,"title":{},"body":{"injectables/AaPipe.html":{},"injectables/CustomValidationPipe.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["transformer",{"_index":303,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":520,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["true",{"_index":66,"title":{},"body":{"guards/AaGuard.html":{},"injectables/CacheInterceptor.html":{},"controllers/MyTestController.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["true})@apiproperty({type",{"_index":749,"title":{},"body":{"classes/User.html":{}}}],["try",{"_index":592,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":953,"title":{},"body":{"index.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/AaFilter.html":{},"classes/AaGateway.html":{},"guards/AaGuard.html":{},"injectables/AaInterceptor.html":{},"injectables/AaMiddleware.html":{},"injectables/AaPipe.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"classes/CreateTaskDto.html":{},"guards/CustomAuthGuard.html":{},"injectables/CustomValidationPipe.html":{},"classes/FileUploadDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/GqlAuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":560,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":851,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([taskrepository",{"_index":710,"title":{},"body":{"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmoduleoptions",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":313,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["types.includes(metatype",{"_index":316,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["typescript",{"_index":913,"title":{},"body":{"index.html":{}}}],["ui",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":260,"title":{},"body":{"classes/CreateTaskDto.html":{},"injectables/CustomValidationPipe.html":{},"classes/HttpExceptionFilter.html":{},"classes/Task.html":{},"classes/User.html":{}}}],["undefined})@apiproperty({type",{"_index":547,"title":{},"body":{"classes/Task.html":{}}}],["undefined})@apiresponse({status",{"_index":634,"title":{},"body":{"controllers/TasksController.html":{}}}],["unique",{"_index":755,"title":{},"body":{"classes/User.html":{}}}],["unique(['username",{"_index":758,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":926,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatetaskstatus",{"_index":625,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetaskstatus(id",{"_index":647,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["upload.dto",{"_index":675,"title":{},"body":{"controllers/TasksController.html":{}}}],["upload.dto.ts",{"_index":319,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:5",{"_index":322,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploadedfile",{"_index":657,"title":{},"body":{"controllers/TasksController.html":{}}}],["uploadfile",{"_index":626,"title":{},"body":{"controllers/TasksController.html":{}}}],["uploadfile(@uploadedfile",{"_index":698,"title":{},"body":{"controllers/TasksController.html":{}}}],["uploadfile(file",{"_index":650,"title":{},"body":{"controllers/TasksController.html":{}}}],["url",{"_index":997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":78,"title":{},"body":{"injectables/AaMiddleware.html":{}}}],["use(req",{"_index":79,"title":{},"body":{"injectables/AaMiddleware.html":{}}}],["usefilters",{"_index":476,"title":{},"body":{"controllers/MyTestController.html":{}}}],["usefilters(httpexceptionfilter",{"_index":492,"title":{},"body":{"controllers/MyTestController.html":{}}}],["useguards",{"_index":477,"title":{},"body":{"controllers/MyTestController.html":{},"controllers/TasksController.html":{}}}],["useguards(authguard",{"_index":678,"title":{},"body":{"controllers/TasksController.html":{}}}],["useguards(customauthguard",{"_index":497,"title":{},"body":{"controllers/MyTestController.html":{}}}],["useguards(rolesguard",{"_index":495,"title":{},"body":{"controllers/MyTestController.html":{}}}],["useinterceptors",{"_index":478,"title":{},"body":{"controllers/MyTestController.html":{},"controllers/TasksController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":696,"title":{},"body":{"controllers/TasksController.html":{}}}],["useinterceptors(logginginterceptor",{"_index":499,"title":{},"body":{"controllers/MyTestController.html":{}}}],["useinterceptors(timeoutinterceptor",{"_index":500,"title":{},"body":{"controllers/MyTestController.html":{}}}],["usepipes",{"_index":658,"title":{},"body":{"controllers/TasksController.html":{}}}],["usepipes(validationpipe",{"_index":691,"title":{},"body":{"controllers/TasksController.html":{}}}],["user",{"_index":414,"title":{"classes/User.html":{}},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":665,"title":{},"body":{"controllers/TasksController.html":{}}}],["user.decorator.ts",{"_index":842,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.entity",{"_index":415,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"classes/UserSubscriber.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":587,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["user.password",{"_index":776,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.repository",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.roles",{"_index":537,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.salt",{"_index":774,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.save",{"_index":778,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.subscriber",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["user.tasks",{"_index":563,"title":{},"body":{"classes/Task.html":{}}}],["user.username",{"_index":595,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/UserRepository.html":{}}}],["user.validatepassword(password",{"_index":786,"title":{},"body":{"classes/UserRepository.html":{}}}],["user[data",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":541,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["username",{"_index":159,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":193,"title":{"classes/UserRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["userroles",{"_index":529,"title":{},"body":{"guards/RolesGuard.html":{}}}],["users",{"_index":809,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["usersservice",{"_index":182,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersubscriber",{"_index":195,"title":{"classes/UserSubscriber.html":{}},"body":{"modules/AuthModule.html":{},"classes/UserSubscriber.html":{},"coverage.html":{}}}],["validate",{"_index":301,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"injectables/JwtStrategy.html":{}}}],["validate(object",{"_index":308,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["validate(payload",{"_index":408,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatepassword",{"_index":744,"title":{},"body":{"classes/User.html":{}}}],["validatepassword(password",{"_index":752,"title":{},"body":{"classes/User.html":{}}}],["validaterequest",{"_index":284,"title":{},"body":{"guards/CustomAuthGuard.html":{}}}],["validaterequest(request",{"_index":286,"title":{},"body":{"guards/CustomAuthGuard.html":{}}}],["validateuserpassword",{"_index":765,"title":{},"body":{"classes/UserRepository.html":{}}}],["validateuserpassword(authcredentialsdto",{"_index":769,"title":{},"body":{"classes/UserRepository.html":{}}}],["validation.pipes",{"_index":660,"title":{},"body":{"controllers/TasksController.html":{}}}],["validation.pipes.ts",{"_index":606,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["validation.pipes.ts:11",{"_index":611,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validation.pipes.ts:15",{"_index":612,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validation.pipes.ts:5",{"_index":609,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validationpipe",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["validator",{"_index":172,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"injectables/CustomValidationPipe.html":{},"classes/GetTasksFilterDto.html":{},"classes/MyTest.html":{},"classes/MyTest2.html":{},"dependencies.html":{}}}],["value",{"_index":92,"title":{},"body":{"injectables/AaPipe.html":{},"injectables/AuthService.html":{},"injectables/CustomValidationPipe.html":{},"guards/RolesGuard.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.touppercase",{"_index":616,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["variable",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":966,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":36,"title":{},"body":{"classes/AaFilter.html":{},"injectables/AaMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"controllers/MyTestController.html":{},"controllers/TasksController.html":{},"classes/UserSubscriber.html":{}}}],["watch",{"_index":922,"title":{},"body":{"index.html":{}}}],["weak",{"_index":164,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["website",{"_index":951,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":48,"title":{},"body":{"classes/AaGateway.html":{}}}],["world",{"_index":52,"title":{},"body":{"classes/AaGateway.html":{},"injectables/AppService.html":{},"controllers/MyTestController.html":{}}}],["you'd",{"_index":940,"title":{},"body":{"index.html":{}}}],["z",{"_index":162,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["z])(?=.*[a",{"_index":161,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["zoom",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyLibraryModule.html":{},"modules/MyTestModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/Aa.html":{"url":"injectables/Aa.html","title":"injectable - Aa","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  Aa\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/my-app/src/aa.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class Aa {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AaFilter.html":{"url":"classes/AaFilter.html","title":"class - AaFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AaFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/my-app/src/aa.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: T, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in apps/my-app/src/aa.filter.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\n\n@Catch()\nexport class AaFilter implements ExceptionFilter {\n  catch(exception: T, host: ArgumentsHost) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AaGateway.html":{"url":"classes/AaGateway.html","title":"class - AaGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AaGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/my-app/src/aa.gateway.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleMessage\n                        \n                        \n                    \n                \n            \n            \n                \nhandleMessage(client: any, payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('message')\n                \n            \n\n            \n                \n                    Defined in apps/my-app/src/aa.gateway.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SubscribeMessage, WebSocketGateway } from '@nestjs/websockets';\n\n@WebSocketGateway()\nexport class AaGateway {\n  @SubscribeMessage('message')\n  handleMessage(client: any, payload: any): string {\n    return 'Hello world!';\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AaGuard.html":{"url":"guards/AaGuard.html","title":"guard - AaGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AaGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/my-app/src/aa.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/my-app/src/aa.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AaGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AaInterceptor.html":{"url":"injectables/AaInterceptor.html","title":"injectable - AaInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AaInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/my-app/src/aa.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in apps/my-app/src/aa.interceptor.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AaInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AaMiddleware.html":{"url":"injectables/AaMiddleware.html","title":"injectable - AaMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AaMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/my-app/src/aa.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in apps/my-app/src/aa.middleware.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class AaMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AaPipe.html":{"url":"injectables/AaPipe.html","title":"injectable - AaPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AaPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/my-app/src/aa.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in apps/my-app/src/aa.pipe.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArgumentMetadata, Injectable, PipeTransform } from '@nestjs/common';\n\n@Injectable()\nexport class AaPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AaResolver.html":{"url":"classes/AaResolver.html","title":"class - AaResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AaResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/my-app/src/aa/aa.resolver.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Resolver } from '@nestjs/graphql';\n\n@Resolver()\nexport class AaResolver {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/my-app/src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/my-app/src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/my-app/src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n// import { AaGateway } from './aa.gateway';\nimport { Aa } from './aa';\nimport { AaResolver } from './aa/aa.resolver';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [AppService, Aa, AaResolver],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/my-app/src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in apps/my-app/src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                signIn\n                            \n                            \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \nsignIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/auth/auth.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \nsignUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/auth/auth.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, ValidationPipe } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthCredentialsDto } from './dto/auth-credential.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('/signup')\n  signUp(\n    @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto,\n  ): Promise {\n    return this.authService.signUp(authCredentialsDto);\n  }\n\n  @Post('/signin')\n  signIn(\n    @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto,\n  ): Promise {\n    return this.authService.signIn(authCredentialsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthCredentialsDto.html":{"url":"classes/AuthCredentialsDto.html","title":"class - AuthCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/auth/dto/auth-credential.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(8)@MaxLength(20)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'password too weak'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/auth/dto/auth-credential.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(4)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/auth/dto/auth-credential.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, Matches, MaxLength, MinLength } from 'class-validator';\n\nexport class AuthCredentialsDto {\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  username: string;\n\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'password too weak'\n  })\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/nest-starter/src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport * as config from 'config';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { UserRepository } from './user.repository';\nimport { UserSubscriber } from './user.subscriber';\nimport { UsersService } from './users.service';\n\nconst jwtConfig = config.get('jwt');\n\n@Module({\n  imports: [\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET || jwtConfig.secret,\n      signOptions: {\n        expiresIn: 3600,\n      },\n    }),\n    TypeOrmModule.forFeature([UserRepository]),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, UsersService, UserSubscriber],\n  exports: [JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in apps/nest-starter/src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/auth/auth.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('AuthService')\n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/auth/auth.service.ts:10\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthCredentialsDto } from './dto/auth-credential.dto';\nimport { JwtPayload } from './jwt-payload.interface';\nimport { UserRepository } from './user.repository';\n\n@Injectable()\nexport class AuthService {\n  private logger = new Logger('AuthService');\n\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n    private jwtService: JwtService,\n  ) {}\n\n  async signUp(authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.userRepository.signUp(authCredentialsDto);\n  }\n\n  async signIn(\n    authCredentialsDto: AuthCredentialsDto,\n  ): Promise {\n    const username = await this.userRepository.validateUserPassword(\n      authCredentialsDto,\n    );\n\n    if (!username) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const payload: JwtPayload = { username };\n    const accessToken = this.jwtService.sign(payload);\n    this.logger.debug(\n      `Generated JWT Token with payload ${JSON.stringify(payload)}`,\n    );\n\n    return { accessToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheInterceptor.html":{"url":"injectables/CacheInterceptor.html","title":"injectable - CacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/common/interceptor/cache.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/common/interceptor/cache.interceptor.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, of } from 'rxjs';\n\n@Injectable()\nexport class CacheInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const isCached = true;\n\n    if (isCached) {\n      return of([]);\n    }\n\n    return next.handle();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                exampleOneOf\n                            \n                            \n                                jj\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({description: 'Description of a task'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/dto/create-task.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exampleOneOf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MyTest | MyTest2\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({oneOf: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/dto/create-task.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jj\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MyTest\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: MyTest})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/dto/create-task.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({enum: TaskStatus})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/dto/create-task.dto.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({description: 'Title of a task'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/dto/create-task.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\nimport { TaskStatus } from '../task-status.enum';\nimport { MyTest } from './my-test.dto';\nimport { MyTest2 } from './my-test2.dto';\n\n@ApiExtraModels(MyTest2)\nexport class CreateTaskDto {\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Title of a task',\n  })\n  title: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Description of a task',\n  })\n  description: string;\n\n  @ApiProperty({ type: MyTest })\n  jj: MyTest;\n\n  @ApiProperty({\n    oneOf: [{ $ref: getSchemaPath(MyTest) }, { $ref: getSchemaPath(MyTest2) }],\n  })\n  exampleOneOf: MyTest | MyTest2;\n\n  @ApiProperty({ enum: TaskStatus })\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/CustomAuthGuard.html":{"url":"guards/CustomAuthGuard.html","title":"guard - CustomAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    CustomAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/nest-starter/src/common/guard/auth.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                validateRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/common/guard/auth.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validateRequest\n                        \n                        \n                    \n                \n            \n            \n                \nvalidateRequest(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/common/guard/auth.guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Request } from 'express';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class CustomAuthGuard implements CanActivate {\n  validateRequest(\n    request: Request,\n  ): boolean | Promise | Observable {\n    return false;\n  }\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    return this.validateRequest(request);\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomValidationPipe.html":{"url":"injectables/CustomValidationPipe.html","title":"injectable - CustomValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/common/pipes/validation.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            toValidate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/common/pipes/validation.pipe.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/common/pipes/validation.pipe.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\n\n@Injectable()\nexport class CustomValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/tasks/dto/file-upload.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            file\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: 'string', format: 'binary'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/dto/file-upload.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class FileUploadDto {\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file: any;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForbiddenException.html":{"url":"classes/ForbiddenException.html","title":"class - ForbiddenException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForbiddenException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/common/filter/forbidden-exception.filter.ts\n        \n\n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/nest-starter/src/common/filter/forbidden-exception.filter.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from \"@nestjs/common\";\n\nexport class ForbiddenException extends HttpException {\n  constructor() {\n    super('Forbidden', HttpStatus.FORBIDDEN);\n  }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTasksFilterDto.html":{"url":"classes/GetTasksFilterDto.html","title":"class - GetTasksFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTasksFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/tasks/dto/get-tasks-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/dto/get-tasks-filter.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/dto/get-tasks-filter.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNotEmpty, IsOptional } from 'class-validator';\nimport { TaskStatus } from '../task-status.enum';\n\nexport class GetTasksFilterDto {\n  @IsOptional()\n  @IsIn([TaskStatus.OPEN, TaskStatus.IN_PROGRESS, TaskStatus.DONE])\n  status: TaskStatus;\n\n  @IsOptional()\n  @IsNotEmpty( )\n  search: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GqlAuthGuard.html":{"url":"injectables/GqlAuthGuard.html","title":"injectable - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/auth/graphql.guard.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRequest\n                        \n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/auth/graphql.guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { GqlExecutionContext } from '@nestjs/graphql';\n\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            check\n                        \n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/health/health.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { DNSHealthIndicator, HealthCheck, HealthCheckService } from '@nestjs/terminus';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private dns: DNSHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.dns.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),\n    ]);\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/common/filter/errors.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/common/filter/errors.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response, Request } from 'express';\n\n// @Catch(ForbiddenException)\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: Error, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const exceptionResponse: any =\n      exception instanceof HttpException ? exception.getResponse() : undefined;\n    const errorObject = {\n      message: exceptionResponse\n        ? exceptionResponse.message || exceptionResponse\n        : exception.message,\n    };\n\n    const error =\n      process.env.NODE_ENG === 'production'\n        ? errorObject\n        : {\n            ...errorObject,\n            stack: exception.stack,\n          };\n\n    if (status !== HttpStatus.INTERNAL_SERVER_ERROR) {\n      delete error['stack'];\n    }\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      ...error,\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/auth/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  username: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in apps/nest-starter/src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/auth/jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport * as config from 'config';\nimport { JwtPayload } from './jwt-payload.interface';\nimport { User } from './user.entity';\nimport { UserRepository } from './user.repository';\n\nconst jwtConfig = config.get('jwt');\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET || jwtConfig.secret,\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const { username } = payload;\n    const user = await this.userRepository.findOne({ username });\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/common/interceptor/logging.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/common/interceptor/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    const now = Date.now();\n    return next.handle().pipe(\n      tap({\n        next: () => console.log(`After... ${Date.now() - now}ms`),\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MyLibraryModule.html":{"url":"modules/MyLibraryModule.html","title":"module - MyLibraryModule","body":"\n                   \n\n\n\n\n    Modules\n    MyLibraryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MyLibraryModule\n\n\n\ncluster_MyLibraryModule_exports\n\n\n\ncluster_MyLibraryModule_providers\n\n\n\n\nMyLibraryService \n\nMyLibraryService \n\n\n\nMyLibraryModule\n\nMyLibraryModule\n\nMyLibraryService  -->\n\nMyLibraryModule->MyLibraryService \n\n\n\n\n\nMyLibraryService\n\nMyLibraryService\n\nMyLibraryModule -->\n\nMyLibraryService->MyLibraryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/my-library/src/my-library.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MyLibraryService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MyLibraryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MyLibraryService } from './my-library.service';\n\n@Module({\n  providers: [MyLibraryService],\n  exports: [MyLibraryService],\n})\nexport class MyLibraryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MyLibraryService.html":{"url":"injectables/MyLibraryService.html","title":"injectable - MyLibraryService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MyLibraryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/my-library/src/my-library.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class MyLibraryService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MyTest.html":{"url":"classes/MyTest.html","title":"class - MyTest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MyTest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/tasks/dto/my-test.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hello\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hello\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({description: 'test'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/dto/my-test.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty } from \"class-validator\";\n\nexport class MyTest {\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'test',\n  })\n  hello: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MyTest2.html":{"url":"classes/MyTest2.html","title":"class - MyTest2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MyTest2\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/tasks/dto/my-test2.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hello2\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hello2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({description: 'test2'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/dto/my-test2.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {  ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class MyTest2 {\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'test2',\n  })\n  hello2: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MyTestController.html":{"url":"controllers/MyTestController.html","title":"controller - MyTestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MyTestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/my-test/my-test.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                my-test\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                t\n                            \n                            \n                                t2\n                            \n                            \n                                t3\n                            \n                            \n                                t4\n                            \n                            \n                                t5\n                            \n                            \n                                    Async\n                                t6\n                            \n                            \n                                t7\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            t\n                        \n                        \n                    \n                \n            \n            \n                \nt()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('t1')\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/my-test/my-test.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            t2\n                        \n                        \n                    \n                \n            \n            \n                \nt2()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('t2')\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/my-test/my-test.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            t3\n                        \n                        \n                    \n                \n            \n            \n                \nt3()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('t3')@UseFilters(HttpExceptionFilter)\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/my-test/my-test.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            t4\n                        \n                        \n                    \n                \n            \n            \n                \nt4()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('t4')@Roles('admin')@UseGuards(RolesGuard)\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/my-test/my-test.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            t5\n                        \n                        \n                    \n                \n            \n            \n                \nt5()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('t5')@UseGuards(CustomAuthGuard)\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/my-test/my-test.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            t6\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    t6()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('t6')@UseInterceptors(LoggingInterceptor)@UseInterceptors(TimeoutInterceptor)\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/my-test/my-test.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            t7\n                        \n                        \n                    \n                \n            \n            \n                \nt7()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('t7')@Render('index')\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/my-test/my-test.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { message: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  ForbiddenException,\n  Get,\n  HttpException,\n  HttpStatus,\n  Render,\n  UseFilters,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { Roles } from '../common/decorator/roles.decorator';\nimport { HttpExceptionFilter } from '../common/filter/errors.filter';\nimport { CustomAuthGuard } from '../common/guard/auth.guard';\nimport { RolesGuard } from '../common/guard/roles.guard';\nimport { LoggingInterceptor } from '../common/interceptor/logging.interceptor';\nimport { TimeoutInterceptor } from '../common/interceptor/timeout.interceptor';\n\n@Controller('my-test')\n\nexport class MyTestController {\n  @Get('t1')\n  t() {\n    throw new HttpException('This is a custom message', HttpStatus.FORBIDDEN);\n  }\n\n  @Get('t2')\n  t2() {\n    throw new ForbiddenException();\n  }\n\n  @Get('t3')\n  @UseFilters(HttpExceptionFilter)\n  t3() {\n    throw new ForbiddenException();\n  }\n\n  @Get('t4')\n  @Roles('admin')\n  @UseGuards(RolesGuard)\n  t4() {\n    return true;\n  }\n\n  @Get('t5')\n  @UseGuards(CustomAuthGuard)  \n  t5() {\n    return true;\n  }\n\n  @Get('t6')\n  @UseInterceptors(LoggingInterceptor)\n  @UseInterceptors(TimeoutInterceptor)\n  async t6() {\n    // sleep function\n    await new Promise(resolve => setTimeout(resolve, 7000));\n\n    return {\n      a: null,\n      b: 'hello'\n    };\n  }\n\n  @Get('t7')\n  @Render('index')\n  t7 () {\n    return { message: 'Hello world!' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MyTestModule.html":{"url":"modules/MyTestModule.html","title":"module - MyTestModule","body":"\n                   \n\n\n\n\n    Modules\n    MyTestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MyTestModule\n\n\n\ncluster_MyTestModule_providers\n\n\n\n\nMyTestService\n\nMyTestService\n\n\n\nMyTestModule\n\nMyTestModule\n\nMyTestModule -->\n\nMyTestService->MyTestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/nest-starter/src/my-test/my-test.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MyTestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MyTestController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MyTestService } from './my-test.service';\nimport { MyTestController } from './my-test.controller';\n\n@Module({\n  providers: [MyTestService],\n  controllers: [MyTestController]\n})\nexport class MyTestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MyTestService.html":{"url":"injectables/MyTestService.html","title":"injectable - MyTestService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MyTestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/my-test/my-test.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class MyTestService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/common/interceptor/transform.interceptor.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor> {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/nest-starter/src/common/guard/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                matchedRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/nest-starter/src/common/guard/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/common/guard/roles.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            matchedRoles\n                        \n                        \n                    \n                \n            \n            \n                \nmatchedRoles(roles: string[], userRoles: string[])\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/common/guard/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    roles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                                \n                                    userRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  matchedRoles(roles: string[] = [], userRoles: string[] = []) {\n    return true;\n  }\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const roles = this.reflector.getAllAndMerge('roles', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!roles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const user = request.user || {};\n    return this.matchedRoles(roles, user.roles);\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/tasks/task.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/task.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/task.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: TaskStatus, default: undefined})@ApiProperty({type: 'enum', enum: TaskStatus})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/task.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/task.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {eager: false})@ApiProperty({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/task.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/task.entity.ts:47\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { User } from '../auth/user.entity';\nimport { TaskStatus } from './task-status.enum';\n\n@Entity()\nexport class Task extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  @ApiProperty()\n  id: number;\n\n  @Column()\n  @ApiProperty()\n  title: string;\n\n  @Column()\n  @ApiProperty()\n  description: string;\n\n  @Column({\n    type: 'enum',\n    enum: TaskStatus,\n    default: TaskStatus.OPEN,\n  })\n  @ApiProperty({\n    type: 'enum',\n    enum: TaskStatus,\n  })\n  status: TaskStatus;\n\n  @ManyToOne(\n    type => User,\n    user => user.tasks,\n    { eager: false },\n  )\n  @ApiProperty({ type: () => User })\n  user: User;\n\n  @ApiProperty()\n  @Column()\n  userId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskRepository.html":{"url":"classes/TaskRepository.html","title":"class - TaskRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/tasks/task.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('TaskRepository')\n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/task.repository.ts:11\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/task.repository.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks(filterDto: GetTasksFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/task.repository.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InternalServerErrorException, Logger } from '@nestjs/common';\nimport { EntityRepository, Repository } from 'typeorm';\nimport { User } from '../auth/user.entity';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { TaskStatus } from './task-status.enum';\nimport { Task } from './task.entity';\n\n@EntityRepository(Task)\nexport class TaskRepository extends Repository {\n  private logger = new Logger('TaskRepository');\n\n  async getTasks(filterDto: GetTasksFilterDto, user: User): Promise {\n    const { status, search } = filterDto;\n    const query = this.createQueryBuilder('task');\n\n    query.where('task.userId = :userId', { userId: user.id });\n\n    if (status) {\n      query.andWhere('task.status = :status', { status });\n    }\n\n    if (search) {\n      query.andWhere(\n        '(task.title LIKE :search OR task.description LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    try {\n      const tasks = await query.getMany();\n      return tasks;\n    } catch (error) {\n      this.logger.error(\n        `Failed to get tasks for user \"${user.username}\", Filters: ${JSON.stringify(\n          filterDto,\n        )}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException();\n    }\n  }\n\n  async createTask(createTaskDto: CreateTaskDto, user: User): Promise {\n    const { title, description } = createTaskDto;\n\n    const task = new Task();\n    task.title = title;\n    task.description = description;\n    task.status = TaskStatus.OPEN;\n    task.user = user;\n\n    try {\n      await task.save();\n    } catch (error) {\n      this.logger.error(\n        `Failed to create task for user \"${\n          user.username\n        }\", Data: ${JSON.stringify(createTaskDto)}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException();\n    }\n\n    delete task.user;\n    return task;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskStatusValidationPipe.html":{"url":"classes/TaskStatusValidationPipe.html","title":"class - TaskStatusValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskStatusValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/tasks/pipes/task-status-validation.pipes.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            PipeTransform\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                allowedStatuses\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isStatusValid\n                            \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            allowedStatuses\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    TaskStatus.OPEN,\n    TaskStatus.IN_PROGRESS,\n    TaskStatus.DONE,\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/tasks/pipes/task-status-validation.pipes.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isStatusValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isStatusValid(status: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/pipes/task-status-validation.pipes.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/pipes/task-status-validation.pipes.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException, PipeTransform } from '@nestjs/common';\nimport { TaskStatus } from '../task-status.enum';\n\nexport class TaskStatusValidationPipe implements PipeTransform {\n  readonly allowedStatuses = [\n    TaskStatus.OPEN,\n    TaskStatus.IN_PROGRESS,\n    TaskStatus.DONE,\n  ];\n\n  private isStatusValid(status: any) {\n    return this.allowedStatuses.includes(status);\n  }\n\n  transform(value: any) {\n    if (!value) {\n      throw new BadRequestException('status is required');\n    }\n\n    value = value.toUpperCase();\n\n    if (!this.isStatusValid(value)) {\n      throw new BadRequestException(`\"${value}\" is an invalid status`);\n    }\n\n    return value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                createTaskArray\n                            \n                            \n                                deleteTask\n                            \n                            \n                                getTaskById\n                            \n                            \n                                getTasks\n                            \n                            \n                                updateTaskStatus\n                            \n                            \n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(ValidationPipe)@ApiCreatedResponse({description: 'The record has been successfully created.', type: Task})\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/tasks.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTaskArray\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTaskArray(createTaskDto: CreateTaskDto[], user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/array')@UsePipes(ValidationPipe)@ApiBody({type: undefined})@ApiResponse({status: 201, description: 'The record has been successfully created.'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/tasks.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                            CreateTaskDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTask(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/tasks.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ngetTaskById(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/tasks.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(filterDto: GetTasksFilterDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/tasks.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTaskStatus(id: number, status: TaskStatus, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/tasks.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                TaskStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            uploadFile\n                        \n                        \n                    \n                \n            \n            \n                \nuploadFile(file)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/file')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({description: 'file', type: FileUploadDto})\n                \n            \n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/tasks.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Logger,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { TaskStatusValidationPipe } from './pipes/task-status-validation.pipes';\nimport { Task } from './task.entity';\nimport { TaskStatus } from './task-status.enum';\nimport { TasksService } from './tasks.service';\nimport { GetUser } from '../common/decorator/get-user.decorator';\nimport { User } from '../auth/user.entity';\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiConsumes,\n  ApiCreatedResponse,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { FileUploadDto } from './dto/file-upload.dto';\n\n@ApiTags('tasks')\n@Controller('tasks')\n@ApiBearerAuth()\n@UseGuards(AuthGuard())\nexport class TasksController {\n  private logger = new Logger('TasksController');\n\n  constructor(private taskService: TasksService) {}\n\n  @Get()\n  getTasks(\n    @Query(ValidationPipe) filterDto: GetTasksFilterDto,\n    @GetUser() user: User,\n  ): Promise {\n    this.logger.verbose(\n      `User \"${user.username}\" retreiving all tasks. Filters: \"${JSON.stringify(\n        filterDto,\n      )}\"`,\n    );\n    return this.taskService.getTasks(filterDto, user);\n  }\n\n  @Get(':id')\n  getTaskById(\n    @Param('id', ParseIntPipe) id: number,\n    @GetUser() user: User,\n  ): Promise {\n    return this.taskService.getTaskById(id, user);\n  }\n\n  // createTask(@Body() body) {\n  // createTask(\n  //   @Body('title') title: string,\n  //   @Body('description') description: string,\n  // ): Task {1\n  @Post()\n  @UsePipes(ValidationPipe)\n  @ApiCreatedResponse({\n    description: 'The record has been successfully created.',\n    type: Task,\n  })\n  createTask(\n    @Body() createTaskDto: CreateTaskDto,\n    @GetUser() user: User,\n  ): Promise {\n    this.logger.verbose(\n      `User \"${user.username}\" creating a new task. Data: \"${JSON.stringify(\n        createTaskDto,\n      )}\"`,\n    );\n    return this.taskService.createTask(createTaskDto, user);\n  }\n\n  @Post('/array')\n  @UsePipes(ValidationPipe)\n  @ApiBody({ type: [CreateTaskDto] })\n  @ApiResponse({\n    status: 201,\n    description: 'The record has been successfully created.',\n  })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  createTaskArray(\n    @Body() createTaskDto: CreateTaskDto[],\n    @GetUser() user: User,\n  ) {\n    this.logger.verbose(\n      `User \"${user.username}\" creating a new task. Data: \"${JSON.stringify(\n        createTaskDto,\n      )}\"`,\n    );\n  }\n\n  @Post('/file')\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'file',\n    type: FileUploadDto,\n  })\n  uploadFile(@UploadedFile() file) {}\n\n  @Delete('/:id')\n  deleteTask(\n    @Param('id', ParseIntPipe) id: number,\n    @GetUser() user: User,\n  ): Promise {\n    return this.taskService.deleteTask(id, user);\n  }\n\n  @Patch(':id/status')\n  updateTaskStatus(\n    @Param('id', ParseIntPipe) id: number,\n    @Body('status', TaskStatusValidationPipe) status: TaskStatus,\n    @GetUser() user: User,\n  ): Promise {\n    return this.taskService.updateTaskStatus(id, status, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_imports\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/nest-starter/src/tasks/tasks.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from '../auth/auth.module';\nimport { TaskRepository } from './task.repository';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TaskRepository]), AuthModule],\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/tasks/tasks.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                getTaskById\n                            \n                            \n                                getTasks\n                            \n                            \n                                    Async\n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: TaskRepository)\n                    \n                \n                        \n                            \n                                Defined in apps/nest-starter/src/tasks/tasks.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        TaskRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/tasks.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/tasks.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskById(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/tasks.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(filterDto: GetTasksFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/tasks.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskStatus(id: number, status: TaskStatus, user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/tasks/tasks.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                TaskStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Task } from './task.entity';\nimport { TaskStatus } from './task-status.enum';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { TaskRepository } from './task.repository';\nimport { User } from '../auth/user.entity';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(TaskRepository)\n    private taskRepository: TaskRepository,\n  ) {}\n\n  getTasks(filterDto: GetTasksFilterDto, user: User): Promise {\n    return this.taskRepository.getTasks(filterDto, user);\n  }\n\n  async getTaskById(id: number, user: User): Promise {\n    const found = await this.taskRepository.findOne({\n      where: { id, userId: user.id },\n    });\n\n    if (!found) {\n      throw new NotFoundException(`Task with ID \"${id}\" not found`);\n    }\n\n    return found;\n  }\n\n  async createTask(createTaskDto: CreateTaskDto, user: User): Promise {\n    return this.taskRepository.createTask(createTaskDto, user);\n  }\n\n  async deleteTask(id: number, user: User): Promise {\n    const result = await this.taskRepository.delete({ id, userId: user.id });\n\n    if (!result.affected) {\n      throw new NotFoundException(`Task with ID \"${id}\" not found`);\n    }\n  }\n\n  async updateTaskStatus(\n    id: number,\n    status: TaskStatus,\n    user: User,\n  ): Promise {\n    const task = await this.getTaskById(id, user);\n    task.status = status;\n    task.save();\n    return task;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/common/interceptor/timeout.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/common/interceptor/timeout.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      timeout(5000),\n      catchError(err => {\n        if (err instanceof TimeoutError) {\n          return throwError(new RequestTimeoutException());\n        }\n        return throwError(err);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/common/interceptor/transform.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/common/interceptor/transform.interceptor.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor> {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/auth/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                tasks\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/auth/user.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/auth/user.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/auth/user.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Task[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {eager: true})@ApiProperty({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/auth/user.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/nest-starter/src/auth/user.entity.ts:22\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/auth/user.entity.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  Unique,\n} from 'typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { Task } from '../tasks/task.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Entity()\n@Unique(['username'])\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  @ApiProperty()\n  id: number;\n\n  @Column()\n  @ApiProperty()\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  salt: string;\n\n  @OneToMany(\n    type => Task,\n    task => task.user,\n    { eager: true },\n  )\n  @ApiProperty({ type: () => [Task] })\n  tasks: Task[];\n\n  async validatePassword(password: string): Promise {\n    const hash = await bcrypt.hash(password, this.salt);\n    return hash === this.password;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/auth/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUserPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/auth/user.repository.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/auth/user.repository.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserPassword(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/auth/user.repository.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { EntityRepository, Repository } from 'typeorm';\nimport { AuthCredentialsDto } from './dto/auth-credential.dto';\nimport { User } from './user.entity';\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n  async signUp(authCredentialsDto: AuthCredentialsDto): Promise {\n    const { username, password } = authCredentialsDto;\n\n    const user = this.create();\n    user.username = username;\n    user.salt = await bcrypt.genSalt();\n    user.password = await this.hashPassword(password, user.salt);\n\n    try {\n      await user.save();\n    } catch (error) {\n      if (error.code === '23505') { // duplicate username\n        throw new ConflictException('Username already exists');\n      } else {\n        throw new InternalServerErrorException();\n      }\n    }\n  }\n\n  async validateUserPassword(authCredentialsDto: AuthCredentialsDto): Promise {\n    const { username, password } = authCredentialsDto;\n    const user = await this.findOne({ username });\n\n    if (user && await user.validatePassword(password)) {\n      return user.username;\n    } else {\n      return null;\n    }\n  }\n\n  private async hashPassword(password: string, salt: string): Promise {\n    return bcrypt.hash(password, salt);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSubscriber.html":{"url":"classes/UserSubscriber.html","title":"class - UserSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/auth/user.subscriber.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        EntitySubscriberInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                beforeInsert\n                            \n                            \n                                listenTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in apps/nest-starter/src/auth/user.subscriber.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            beforeInsert\n                        \n                        \n                    \n                \n            \n            \n                \nbeforeInsert(event: InsertEvent)\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/auth/user.subscriber.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                InsertEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listenTo\n                        \n                        \n                    \n                \n            \n            \n                \nlistenTo()\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/auth/user.subscriber.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Connection, EntitySubscriberInterface, EventSubscriber, InsertEvent } from \"typeorm\";\nimport { User } from \"./user.entity\";\n\n@EventSubscriber()\nexport class UserSubscriber implements EntitySubscriberInterface {\n  constructor(connection: Connection) {\n    connection.subscribers.push(this);\n  }\n\n  listenTo() {\n    return User;\n  }\n\n  beforeInsert(event: InsertEvent) {\n    console.log(`BEFORE USER INSERTED: `, event.entity);\n  }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-starter/src/auth/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in apps/nest-starter/src/auth/users.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createMany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createMany(users: User[])\n                \n            \n\n\n            \n                \n                    Defined in apps/nest-starter/src/auth/users.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    users\n                                    \n                                                User[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Connection } from \"typeorm\";\nimport { User } from \"./user.entity\";\n\n@Injectable()\nexport class UsersService {\n  constructor(private connection: Connection) {}\n\n  async createMany(users: User[]) {\n    const queryRunner = this.connection.createQueryRunner();\n  \n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n    try {\n      await queryRunner.manager.save(users[0]);\n      await queryRunner.manager.save(users[1]);\n  \n      await queryRunner.commitTransaction();\n    } catch (err) {\n      // since we have errors lets rollback the changes we made\n      await queryRunner.rollbackTransaction();\n    } finally {\n      // you need to release a queryRunner which was manually instantiated\n      await queryRunner.release();\n    }\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/my-app/src/aa.decorator.ts\n            \n            variable\n            Aa\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/my-app/src/aa.filter.ts\n            \n            class\n            AaFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/my-app/src/aa.gateway.ts\n            \n            class\n            AaGateway\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/my-app/src/aa.guard.ts\n            \n            guard\n            AaGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/my-app/src/aa.interceptor.ts\n            \n            injectable\n            AaInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/my-app/src/aa.middleware.ts\n            \n            injectable\n            AaMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/my-app/src/aa.pipe.ts\n            \n            injectable\n            AaPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/my-app/src/aa.ts\n            \n            injectable\n            Aa\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/my-app/src/aa/aa.resolver.ts\n            \n            class\n            AaResolver\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/my-app/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/my-app/src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/my-app/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/app.module.ts\n            \n            variable\n            envConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/auth.module.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/dto/auth-credential.dto.ts\n            \n            class\n            AuthCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/graphql-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/graphql.guard.ts\n            \n            injectable\n            GqlAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/jwt.strategy.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/user.subscriber.ts\n            \n            class\n            UserSubscriber\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/auth/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/decorator/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/decorator/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/filter/errors.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/filter/forbidden-exception.filter.ts\n            \n            class\n            ForbiddenException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/guard/auth.guard.ts\n            \n            guard\n            CustomAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/guard/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/interceptor/cache.interceptor.ts\n            \n            injectable\n            CacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/interceptor/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/interceptor/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/interceptor/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/interceptor/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/middleware/logger.middleware.ts\n            \n            function\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/common/pipes/validation.pipe.ts\n            \n            injectable\n            CustomValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/config/typeorm.config.ts\n            \n            variable\n            dbConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/config/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/my-test/my-test.controller.ts\n            \n            controller\n            MyTestController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/my-test/my-test.service.ts\n            \n            injectable\n            MyTestService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/tasks/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/tasks/dto/get-tasks-filter.dto.ts\n            \n            class\n            GetTasksFilterDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/tasks/dto/my-test.dto.ts\n            \n            class\n            MyTest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/tasks/dto/my-test2.dto.ts\n            \n            class\n            MyTest2\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/tasks/pipes/task-status-validation.pipes.ts\n            \n            class\n            TaskStatusValidationPipe\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/tasks/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/tasks/task.repository.ts\n            \n            class\n            TaskRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/nest-starter/src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                libs/my-library/src/my-library.service.ts\n            \n            injectable\n            MyLibraryService\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/graphql : ^7.7.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.6.1\n        \n            @nestjs/terminus : ^7.0.1\n        \n            @nestjs/typeorm : ^7.1.4\n        \n            @nestjs/websockets : ^7.4.4\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            config : ^3.3.2\n        \n            hbs : ^4.1.1\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.4.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.4\n        \n            typeorm : ^0.2.28\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskStatus   (apps/.../task-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/nest-starter/src/tasks/task-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                Value : OPEN\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                        \n                            logger   (apps/.../logger.middleware.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/my-app/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    apps/nest-starter/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    apps/nest-starter/src/common/middleware/logger.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            logger\n                        \n                        \n                    \n                \n            \n            \n                \nlogger(req, res, next)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MyLibraryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MyTestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MyLibraryModule\n\n\n\ncluster_MyLibraryModule_exports\n\n\n\ncluster_MyLibraryModule_providers\n\n\n\ncluster_MyTestModule\n\n\n\ncluster_MyTestModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nMyTestModule\n\nMyTestModule\n\nAppModule -->\n\nMyTestModule->AppModule\n\n\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\nMyLibraryService \n\nMyLibraryService \n\n\n\nMyLibraryModule\n\nMyLibraryModule\n\nMyLibraryService  -->\n\nMyLibraryModule->MyLibraryService \n\n\n\n\n\nMyLibraryService\n\nMyLibraryService\n\nMyLibraryModule -->\n\nMyLibraryService->MyLibraryModule\n\n\n\n\n\nMyTestService\n\nMyTestService\n\nMyTestModule -->\n\nMyTestService->MyTestModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    17 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aa   (apps/.../aa.decorator.ts)\n                        \n                        \n                            CurrentUser   (apps/.../graphql-user.decorator.ts)\n                        \n                        \n                            dbConfig   (apps/.../typeorm.config.ts)\n                        \n                        \n                            envConfig   (apps/.../app.module.ts)\n                        \n                        \n                            GetUser   (apps/.../get-user.decorator.ts)\n                        \n                        \n                            jwtConfig   (apps/.../auth.module.ts)\n                        \n                        \n                            jwtConfig   (apps/.../jwt.strategy.ts)\n                        \n                        \n                            Roles   (apps/.../roles.decorator.ts)\n                        \n                        \n                            typeOrmConfig   (apps/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/my-app/src/aa.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Aa\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...args: string[]) => SetMetadata('aa', args)\n                        \n                    \n\n\n            \n        \n\n    apps/nest-starter/src/auth/graphql-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CurrentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data: unknown, context: ExecutionContext) => {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    apps/nest-starter/src/config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dbConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : config.get('db')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            typeOrmConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: process.env.DB_TYPE ||dbConfig.type,\n  host: process.env.DB_HOST || dbConfig.host,\n  port: process.env.DB_PORT || dbConfig.port,\n  username: process.env.DB_USER || dbConfig.username,\n  password: process.env.DB_PASSWORD || dbConfig.password,\n  database: process.env.DB_NAME || dbConfig.database,\n  entities: [User, Task],\n  // url: process.env.DATABASE_URL,\n  synchronize: process.env.DB_SYNCHRONIZE || dbConfig.synchronize,\n}\n                        \n                    \n\n\n            \n        \n\n    apps/nest-starter/src/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConfigModule.forRoot({\n  isGlobal: true,\n})\n                        \n                    \n\n\n            \n        \n\n    apps/nest-starter/src/common/decorator/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data, ctx: ExecutionContext): User => {\n    const req = ctx.switchToHttp().getRequest();\n    const user = req.user;\n    return data ? user && user[data] : user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    apps/nest-starter/src/auth/auth.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : config.get('jwt')\n                        \n                    \n\n\n            \n        \n\n    apps/nest-starter/src/auth/jwt.strategy.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : config.get('jwt')\n                        \n                    \n\n\n            \n        \n\n    apps/nest-starter/src/common/decorator/roles.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: string[]) => SetMetadata('roles', roles)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
